##########################################################Signos y operandos#################################################################

aumento --> \++
decremento--> \--
multiplicacion --> \*
suma --> \+
resta --> \-
equivalente --> \=
negacion --> \!
finalExpre --> \$
division --> \/
modulo --> \~
potencia --> \**
aperturaB --> \{
cerraduraB --> \}
aperturaC --> \[
cerraduraC --> \]
aperturaP --> \(
cerraduraP --> \)
comentarioL --> \@
comentApert --> \/_ 
comentCerrad --> \_/
conjuncion --> \^
disyuncion --> \#
True --> 0 | true
False --> 1 | false

#################################################################bases########################################################################

letra --> [a-zA-Z_]
id --> letra(letra|\d)*
caracter --> \S{1}
string --> caracter+
digito --> [0-9]
digitoN --> [1-9]
bool --> True | False
menor --> \<
mayor --> \>
menorIgual --> \=>
mayorIgual --> \=<
diferente --> \!=
igual --> \==

###############################################################agrupaciones####################################################################

tipo --> 'int' | 'bool' | 'string' | 'char' | 'float'
tipoNum --> 'int' | 'float'

operandoArit --> '+' | '-' | '/' | '*' | '~' | '**' 
operandoRac --> '<' | '>' | '=>' | '=<' | '!=' | '=='

###########################################################Expresiones complejas###############################################################

numeroE --> resta? 0 | digitoNdigito*
numeroF --> resta? 0.digito* | digitoNdigito*.digito* #agregacion de la posibilidad de 0.x

#hay que definir un grupo de tipos de variables y preguntar si se deben definir todas las variables de todos los tipos por aparte.


operando --> numeroE | numeroF
operacionNumSim --> operando operandoArit operando 
operacionNum --> operacionNumSim (operandoArit  operando)*
variableNum --> (tipoNum id equivalente ((numeroE | numeroF)) | operacionNum
operacionSumUna --> aumento operando | aumento variableNum
operacionResUna --> decremento operando | decremento variableNum
asignVar --> tipo id equivalente id
operacionRacSim --> operando operandoRac operando
operacionRac --> operacionRacSim (operandoRac operando)*

cmd --> (creaVarNum | operacionNum | asignVar | operacionRac)finalExpre
bloque --> cmd*
return --> 'return' (id | bool)

funcion --> tipo id aperturaP variable* cerraduraP aperturaB bloque return cerraduraB    ##como se pondria que permita 0 o muchos como args?
funMain --> tipo 'main' aperturaP cerraduraP aperturaB bloque cerraduraB
comentarioLineal --> comentarioL string
comentarioBloque --> comentApert string comentCerrad

if --> "if" aperturaP condicion cerraduraP aperturaB bloque cerraduraB
else --> "else" aperturaB bloque cerraduraB
elif --> "elif" aperturaP condicion cerraduraP aperturaB bloque cerraduraB