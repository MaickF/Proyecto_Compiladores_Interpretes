##########################################################Signos y operandos#################################################################


aumento --> \++
decremento--> \--
multiplicacion --> \*
suma --> \+
resta --> \-
equivalente --> \=
negacion --> \!
finalExpre --> \$
division --> \/
modulo --> \~
potencia --> \**
aperturaB --> \{
cerraduraB --> \}
aperturaC --> \[
cerraduraC --> \]
aperturaP --> \(
cerraduraP --> \)
comentarioL --> \@
comentApert --> \/_ 
comentCerrad --> \_/
conjuncion --> \^
disyuncion --> \#
True --> 0 | true
False --> 1 | false

#################################################################bases########################################################################

letra --> [a-zA-Z_]
id --> letra(letra|\d)*
caracter --> \S{1}
string --> caracter+
digito --> [0-9]
digitoN --> [1-9]
bool --> True | False
menor --> \<
mayor --> \>
menorIgual --> \=>
mayorIgual --> \=<
diferente --> \!=
igual --> \==

###############################################################agrupaciones####################################################################

tipo --> 'int' | 'bool' | 'string' | 'char' | 'float'
tipoNum --> 'int' | 'float'
tipoFuncion --> tipoNum | 'bool'

operacionArit --> suma | resta | division | multiplicacion | modulo | potencia 
operacionRac --> menor | mayor | menorIgual | mayorIgual | diferente | igual
operacionLog --> diferente | igual | conjuncion | disjuncion

###########################################################Expresiones complejas###############################################################

numeroE --> resta? 0 | digitoNdigito*
numeroF --> resta? 0.digito* | digitoNdigito*.digito* #agregacion de la posibilidad de 0.x
grupoArreglo --> numeroE | caracter
lista --> grupoArreglo (\,grupoArreglo)*
arregloSim --> tipoArreglo id aperturaC numeroE cerraduraC
arregloAsig--> arregloSim equivalente aperturaC lista cerraduraC
arregloInd --> id aperturaC numeroE cerraduraC equivalente grupoArreglo

#hay que definir un grupo de tipos de variables y preguntar si se deben definir todas las variables de todos los tipos por aparte.


operando --> numeroE | numeroF | id |funcionAsig
operacionNumSim --> operando operacionArit operando 
operacionNum --> operacionNumSim (operacionArit  operando)*
variableNum --> tipoNum id equivalente ((numeroE | numeroF) | operacionNum | id)
operacionSumUna --> aumento operando | aumento variableNum
operacionResUna --> decremento operando | decremento variableNum
operacionRacSim --> operando operacionRac operando
operacionRacNum --> operacionRacSim (operacionRac operando)*

operandoBool --> expNegada |bool | operacionRacNum | id | funcionAsig
condicionSim --> operandoBool  operacionLog operandoBool 
condicion --> condicionSim (operacionLog condicionSim)*
variableB --> "bool" id equivalente condicion
expNegada --> negacion(condicion | variableB | operandoBool)

variable --> tipo id | arreglo
#------variable --> tipo (id | arregloSim)
variableAsig --> (variable equivalente (funcionAsig | caracter | string | id)) | variableNum | variableB | arregloAsig

if --> "if" aperturaP condicion* cerraduraP aperturaB bloque break? cerraduraB
elif --> "elif" aperturaP condicion* cerraduraP aperturaB bloque break? cerraduraB
else --> "else" aperturaB bloque break? cerraduraB
bloqueIf --> if elif? else?

do --> "do" aperturaB bloque break? cerraduraB
while --> "while" aperturaP condicion cerraduraP
bloqueDoWhile --> do while
break --> "break"

for --> "for" (variable | variableAsig) "in" id (operacionSumaUna | operacionRestaUna) aperturaB bloque break? crerraduraB
bloqueFor --> for aperturaB bloque cerraduraB

parametroMul --> id (\,id)*
funcion --> tipoFuncion id aperturaP (id|parametro)? cerraduraP aperturaB bloque return cerraduraB    ##como se pondria que permita 0 o muchos como args?
funcionAsig --> id aperturaP (id|parametro)? cerraduraP

declaracion --> (variable | variableAsig | operacionNum | operacionRac | arreglo | arregloAsig | arregloInd | input | print)finalExpre
sentencia --> declaracion | bloqueIf | funcion | bloqueDoWhile | bloqueFor
bloque --> sentencia*
return --> "return" (id | numeroE | numeroF)

funMain --> tipo "main" aperturaP (id|parametro)? cerraduraP aperturaB bloque cerraduraB
comentarioLineal --> comentarioL string
comentarioBloque --> comentApert string comentCerrad
print --> "print" aperturaP string cerraduraP
inputVar --> string | tipoNum
input --> "input" aperturaP inputVar cerraduraP

programa --> bloque


