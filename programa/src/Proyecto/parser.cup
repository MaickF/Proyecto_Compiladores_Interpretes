package Proyecto;

/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

/*Imports para la tabla de simbolos*/
import java.util.HashMap;
import java.util.Hash;
import java.util.ArrayList;

//Inicialización de l hasmap para desarrollar las tablas de símbolos
action code{:
        HashMap<String, ArrayList<String>> symbols_table = new HashMap<String, ArrayList<String>>();
        String current_hash;
        public void print_symbols_table(){
                for (String key: symbols_table.keySet()) {
                        System.out.println("Tabla de simbolos: \n" + key);
                        System.out.println("Valores: ");
                        for (String item: symbols_table.get(key)) {
                                System.out.println(item);
                        }
                        System.out.println("");
                }
        }

        public String obtenerTipoVariable(String variable) {
                String[] tipos = {"int","char","string","boolean","float"};
                int cuenta = 0;
                String resultado = "";
                for(int i=0; i<tipos.length; i++){
                        boolean existe = existeVariable(variable, tipos[i]);
                        if(existe){
                                resultado = tipos[i];
                                break;
                        }
                }
                return resultado;
        }

        public boolean existeVariable(String nombre, String tipo){
                String muestra = nombre+":"+tipo;
                String muestra2 = "parametro:"+muestra;
                if (symbols_table.get(current_hash).contains(muestra) || symbols_table.get(current_hash).contains(muestra2)){
                        return true;
                }else{
                        return false;
                }
        }

        public void comprobarVariable(String tipo, String nombre){
                boolean existencia = obtenerTipoVariable(nombre);
                if(existencia.equals("")){
                        System.out.println("PARSER: identificardor: " + tipo);
                        String nuevo = nombre + ":" + tipo;
                        symbols_table.get(current_hash).add(nuevo);
                }else{
                        System.out.println("La variable:" + nombre + "ya existe en esta función");
                }
        }

        public void comprobarFuncion(String tipo, String nombre, String param, Object ValorRetorno){
                if(!(param.equals(""))){
                        boolean verificarParam = verificarNombresParametros(param);
                        if(!verificarParam){
                                String tipoValorRetorno = verificarTipoVariable(valorRetorno);
                                if(tipoValorRetorno.equals("identifier")){
                                        String existeValorRetorno=obtenerTipoVariable(tipoValorRetorno);
                                        if(existeValorRetorno.equals(tipo)){
                                                existeFuncion(nombre, tipo);
                                        }else{
                                                System.out.println("");
                                        }
                                }else{
                                        if(tipoValorRetorno.equals(tipo)){
                                                existeFuncion(nombre, tipo);
                                        }else{
                                                System.out.println("");
                                        }
                                }
                                
                        }else{
                               System.out.println("Parametros repetidos"); 
                        }
                }else{
                        String tipoValorRetorno = verificarTipoVariable(valorRetorno);
                        if(tipoValorRetorno.equals("identifier")){
                                String existeValorRetorno=obtenerTipoVariable(tipoValorRetorno);
                                if(existeValorRetorno.equals(tipo)){
                                        existeFuncion(nombre, tipo);
                                }else{
                                        System.out.println("");
                                }
                        }else{
                                if(tipoValorRetorno.equals(tipo)){
                                        existeFuncion(nombre, tipo);
                                }else{
                                        System.out.println("");
                                }
                        }
                }
        }

        public boolean existeFuncion(String nombre, String tipo, String params){
                if (symbols_table.get(nombre)==null){
                        System.out.println("/_Nueva tabla de simbolos_/:  " + b);
                        ArrayList<String> funcionMain = new ArrayList<String>();
                        current_hash = nombre;
                        funcionMain.add(tipo);
                        symbols_table.put(current_hash, funcionMain);
                }else{
                        String tipoEncontrado = symbols_table.get(nombre).get(0);
                        if(!(tipo.equals(tipoEncontrado))){
                                System.out.println("/_Nueva tabla de simbolos_/:  " + b);
                                ArrayList<String> funcionMain = new ArrayList<String>();
                                current_hash = nombre;
                                funcionMain.add(tipo);
                                symbols_table.put(current_hash, funcionMain);
                        }else{
                                
                        }       
                }
        }

        public int contarParametros(String entrada) {
                String[] parametros = entrada.trim().split(",\\s*");
                return parametros.length;
        }

         public List<String> extraerTiposParametros(List<String> parametros) {
                List<String> tipos = new ArrayList<>();

                for (String parametro : parametros) {
                        String[] partes = parametro.split(":");
                        if (partes.length >= 3) {
                              tipos.add(partes[2]);
                        }
                }

                return tipos;
        }

        public <T> boolean compararListas(List<T> lista1, List<T> lista2) {
        if (lista1.size() != lista2.size()) {
            return false;
        }

        for (int i = 0; i < lista1.size(); i++) {
            if (!lista1.get(i).equals(lista2.get(i))) {
                return false;
            }
        }

        return true;
    }

        public boolean verificarNombresParametros(String parametros) {
                String[] listaParametros = parametros.split(",");
                int numParametros = listaParametros.length;

                for (int i = 0; i < numParametros - 1; i++) {
                        for (int j = i + 1; j < numParametros; j++) {
                                String nombreParametro1 = listaParametros[i].trim().split(" ")[1];
                                String nombreParametro2 = listaParametros[j].trim().split(" ")[1];

                                if (nombreParametro1.equals(nombreParametro2)) {
                                        return true;
                                }
                        }
                }

                return false;
        }

        public void verificarAsignacion(String nombre, Object valor){
                String existencia = obtenerTipoVariable(nombre);
                if(existencia.equals("")){
                        System.out.println("Esta variable no existe");
                }else{
                        String tipo = verificarTipoVariable(valor);
                        if(tipo.equals(existencia)){
                                System.out.println("good");
                        }else if(tipo.equals("identifier")){
                                String existencia2 = obtenerTipoVariable(valor.toString());
                                if(existencia.equals(existencia2) && !(nombre.equals(valor))){
                                        System.out.println("good");
                                }else{
                                        System.out.println("La variable asignada no coincide");
                                }
                        }else{
                                System.out.println("El tipo del valor no coincide");
                        }
                }
        }

        public void verificarInicializacion(String nombre, String tipo, Object valor){
                String existencia = existeVariable(nombre, tipo);
                if(existencia){
                        System.out.println("Esta variable ya existe");
                }else{
                        String tipo = verificarTipoVariable(valor);
                        if(tipo.equals(tipo)){
                                System.out.println("good");
                        }else if(tipo.equals("identifier")){
                                String existencia2 = obtenerTipoVariable(valor.toString());
                                if(tipo.equals(existencia2) && !(nombre.equals(valor))){
                                        System.out.println("good");
                                }else{
                                        System.out.println("La variable asignada no coincide");
                                }
                        }else{
                                System.out.println("El tipo del valor no coincide");
                        }
                }
        }

        public String verificarTipoVariable(Object variable) {
                if (variable instanceof String) {
                        String valor = (String) variable;
                if (valor.startsWith("\"") && valor.endsWith("\"")) {
                        return "String";
                } else {
                        return "identifier";
                }
                } else if (variable instanceof Integer) {
                        return "int";
                } else if (variable instanceof Boolean) {
                        return "boolean";
                } else if (variable instanceof Double) {
                        return "double";
                } else if (variable instanceof Character) {
                        return "char";
                } else {
                        return "unknown";
                }
        }
:}

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* define how to connect to the scanner! */

init with {: :};
scan with {: return lex.next_token(); :};

/* Terminals (tokens returned by the scanner). */

terminal            BOOLEAN, BREAK, INT, FLOAT, CHAR;
terminal            STRING_LITERAL, LBLOQUE, RBLOQUE, STRING;
terminal            SEMI, UMINUS, LPAREN, RPAREN;
terminal            aperturaB, cerraduraB, aperturaC, cerraduraC, aperturaP, cerraduraP, comentarioL;
terminal            comentApert, comentCerrad, finalExpre, True, False;
terminal            letra, ident, caracter, bool;
terminal            menor, mayor, menorIgual, mayorIgual, diferente;
terminal            aumento, equivalente, igual, suma, decremento, multiplicacion, resta, negacion, division, modulo, potencia, conjuncion, disyuncion;
terminal            coma, punto, mainC, forC, doC, whileC, ifC, elseC, elifC, inputC, returnC, printC, inC;
terminal            NUMBER;
terminal            INTEGER_LITERAL;
terminal            FLOAT_LITERAL;

/* Non terminals */

non terminal expr, bloqueIf, bloqueElif, ifD, elif, elseD, doD, whileD, bloqueDoWhile, bloque, funMain;      // used to store evaluated subexpressions
non terminal operando, operacionNum, operacionNumSim, condicion, condicionSim, operacionRacNum, operandoBool;
non terminal tipoFuncion, tipoNum, operacionArit, operacionLog, operacionRac, sentencia, variableBool;
non terminal grupoArreglo, lista, arregloSim, arregloAsig, arregloInd, forD, bloqueFor, expNegada, comentarioBloque;
// non terminal returnD, input, print, param, funcionAsig, listaIdent, tipoVarArr,funcion, variableNum, comentarioLineal;
non terminal returnD, input, print, param, funcionAsig, listaIdent, tipoArr, tipoVar, variableNum, comentarioLineal;
non terminal variableAsig, variable,agrupacionVariable, declaracion, operacionSumaUna, operacionRestaUna;
non terminal ini, inicio, main, funciones, iniFuncion, identFunc, opBloque, partIzqCreacion, identMain, listaParam;
non terminal asignacion;

/* Precedences */

precedence left suma, resta;
precedence left multiplicacion, division, modulo;
precedence left potencia;

precedence left coma;

//precedence left ident, operandoBool, funcionAsig;
//precedence left operacionArit;

// start with funcion;


start with ini;
/* The grammar rules */

// partIzqCreacion ::= tipoVarArr:a ident:b 
//                 {: 
//                         System.out.print("PARSER: identificardor: " + b.toString());
//                         symbols_table.get(current_hash).add(b.toString() + ": " + a.toString());
//                 :};


//Parte inicial de una función compuesta de un tipo y un identificador, ejemplo: "int miFuncion"
identFunc ::= tipoFuncion:a ident:b 
                {: 
                        comprobarFuncion(a.toString(), b.toString());
                :};

//Parte inicial de la función main compuesta del terminal main y un tipo
identMain ::= tipoFuncion:a mainC
                {: 
                        comprobarFuncion(a.toString(), "main");
                :};

//Definición de una función común, con posibilidad de contener parametros o no
iniFuncion ::= tipoFuncion:a ident:b aperturaP param:c cerraduraP aperturaB bloque:d returnD:e cerraduraB {: comprobarFuncion(a.toString(), b.toString(), c.toString()); RESULT = a+" " + b"("+c+") {"+d+e+"}"; :}
                |tipoFuncion:a ident:b aperturaP cerraduraP aperturaB bloque:c returnD:d cerraduraB {: comprobarFuncion(a.toString(), b.toString(), ""); RESULT = a+" " + b"() {"+c+d+"}"; :}
                ;

//Definición de un bloque que agrupa múltiples funciones
funciones ::= funciones iniFuncion:a {: System.out.println("/_Fin de tabla de simbolos1: _/"+ a); :}
                | iniFuncion:a {: System.out.println("/_Fin de tabla de simbolos2: _/"+ a); :}
                ;

//Definición de la función main
main ::= identMain aperturaP cerraduraP aperturaB bloque returnD cerraduraB {: System.out.println("/_Fin de tabla de simbolos3: _/ : main"); :};

//Agrupación de múltiples funciones, entre las que debe estar la función main
inicio ::= funciones main
                | main funciones
                | funciones main funciones
                | main
                ;

//Símbolo inicial del programa
ini ::= inicio {: print_symbols_table(); :};

//Operando numérico que posteriormente podrá ser utilizado para operaciones númericas y racionales
operando ::=  INTEGER_LITERAL:a {: RESULT = a.toString(); :}
            | FLOAT_LITERAL:a {: RESULT = a.toString(); :}
            | ident:a {: RESULT = a; :}
            | funcionAsig:a {: RESULT = a; :}
            | operacionSumaUna
            | operacionRestaUna
            ;

//operación aritmétrica simple, compuesta de dos operandos
operacionNumSim ::= operando:a operacionArit:b operando:c {: RESULT = a+" "+b+" "+c; :}
                | aperturaP operando:a operacionArit:b operando:c cerraduraP {: RESULT = "("+a+" "+b+" "+c+")"; :};


operacionNum ::= operacionNum:a operacionArit:b operando:c {: RESULT = a+" "+b+" "+c; :}
                | aperturaP operacionNum:a operacionArit:b operando:c cerraduraP {: RESULT = "("+a+" "+b+" "+c+")"; :}
                | operacionNumSim:a {: RESULT = a; :}
                ;

//Operación aritmétrica compleja compuesta de una cantidad de operandos indeterminada

//Expresiones aritmétricas capaces de ser asignadas a una variable
variableNum ::= INTEGER_LITERAL:d {: RESULT = d; :}
            | FLOAT_LITERAL:d {: RESULT = d; :}
            | operacionNum:d {: RESULT = d; :}
            ;

//Aumento unitario de una variable
operacionSumaUna ::= aumento ident:a {: RESULT = "++" + a; :};

//Decremento unitario de una variable
operacionRestaUna ::= decremento ident:a {: RESULT = "--" + a; :};

//operacion racional de dos operandos númericos
operacionRacNum ::= operando:a operacionRac:b operando:c {: RESULT = a+" "+b+" "+c ; :};

//Operando booleanos que podrá ser utilizado después para operaciones booleanas
operandoBool ::= aperturaP operandoBool:a cerraduraP {: RESULT = "("+a+")"; :}
                |expNegada:a {: RESULT = a; :}
                |bool:a {: RESULT = a; :}
                | operacionRacNum:a {: RESULT = a; :}
                | ident:a {: RESULT = a; :}
                | funcionAsig:a {: RESULT = a; :}
                ;

//Operación lógica simple de dos operandos booleanos
condicionSim ::= operandoBool:a  operacionLog:b operandoBool:c {: RESULT = a+" "+b+" "+c; :};

//Operación lógica compleja de una cantidad indefinida de operandos booleanos
condicion ::= condicion:a operacionLog:b operandoBool:c {: RESULT = a+" "+b+" "+c; :}
            |condicionSim:a {: RESULT = a; :}
            ;

//tipos de expresiones booleanas capaces de ser asignadas a una variable
variableBool ::= expNegada:a {: RESULT = a; :}
                |bool:a {: RESULT = a; :}
                |operacionRacNum:a {: RESULT = a; :}
                |condicion:a {: RESULT = a; :}
                ;
                
//Expresión booleana negada
expNegada ::= negacion expNegada:a {: RESULT = "!"+a; :}
             |negacion aperturaP condicion:a cerraduraP {: RESULT = "!"+"("+a+")"; :}
             |negacion ident:a {: RESULT = a; :}
             |negacion funcionAsig:a {: RESULT = a; :}
             ;

//Definición de una expresión if y sus variantes
ifD ::= ifC aperturaP operandoBool:a cerraduraP aperturaB bloque:b cerraduraB {: RESULT = "if ("+a+"){"+b+"}"; :}
      |ifC aperturaP operandoBool:a cerraduraP aperturaB bloque:b BREAK cerraduraB {: RESULT = "if ("+a+"){"+b+"break$}"; :}
      |ifC aperturaP condicion:a cerraduraP aperturaB bloque:b cerraduraB {: RESULT = "if ("+a+"){"+b+"}"; :}
      |ifC aperturaP condicion:a cerraduraP aperturaB bloque:b BREAK cerraduraB {: RESULT = "if ("+a+"){"+b+"break$}"; :}
      ;

//Definición de una expresión elif y sus variantes
elif ::= elifC aperturaP ident:a cerraduraP aperturaB bloque:b cerraduraB {: RESULT = "elif ("+a+"){"+b+"}"; :}
      |elifC aperturaP ident:a cerraduraP aperturaB bloque:b BREAK cerraduraB {: RESULT = "elif ("+a+"){"+b+"break$}"; :}
      |elifC aperturaP condicion:a cerraduraP aperturaB bloque:b cerraduraB {: RESULT = "if ("+a+"){"+b+"}"; :}
      |elifC aperturaP condicion:a cerraduraP aperturaB bloque:b BREAK cerraduraB {: RESULT = "elif ("+a+"){"+b+"break$}"; :}
      ;

//Definición de una expresión else
elseD ::= elseC aperturaB bloque:a cerraduraB {: RESULT = "else{"+a+"}"; :}
        | elseC aperturaB bloque:a BREAK cerraduraB {: RESULT = "else{"+a+"break$}"; :}
        ;

//Definición de un bloque elif, el cual cumple con la función de permitir asignar múltiples expresiones elif después de una expresión if
bloqueElif ::= bloqueElif:a elif:b {: RESULT = a+" "+b; :}
              |elif:a {: RESULT = a; :}
              ;

//Definición de un bloque if, el cual puede contar con múltiples expresiones elif y con una expresión else
bloqueIf ::= ifD:a bloqueElif:b {: RESULT = a+" "+b; :}
            |ifD:a elseD:b {: RESULT = a+" "+b; :}
            |ifD:a bloqueElif:b elseD:c {: RESULT = a+" "+b+" "+c; :}
            |ifD:a {: RESULT = a; :}
            ;
//Lista simple de elementos, ejemplo: 1,2,3,4,4
lista ::= lista:l1 coma lista:l2 {: RESULT = l1+","+l2; :}
         |grupoArreglo:n {: RESULT = n; :}
        ;

//Grupo de valores capaces de ser asignados a un arreglo
grupoArreglo ::= INTEGER_LITERAL:a {: RESULT = a; :}
                |FLOAT_LITERAL:a {: RESULT = a; :}
                |caracter:a {: RESULT = a; :}
                ;

listaParam ::= listaParam:a coma listaParam:b {: RESULT = a+","+b; :}
                | lista:n {: RESULT = n; :}
                | listaIdent:n {: RESULT = n; :}
                ;

asignacion ::= ident:a equivalente agrupacionVariable:b {: RESULT = a+"="+b; :};

//Declaración de un arreglo con tamaño estático, sin ser inicializado
arregloSim ::= tipoArr:c ident:a aperturaC INTEGER_LITERAL:b cerraduraC {: RESULT = c+" "+a+" ["+b.toString()+"]"; :};

//Inicialización de un arreglo a una lista de valores
arregloAsig ::= arregloSim:a equivalente aperturaC lista:b cerraduraC {: RESULT = a+" = ["+b+"]"; :};

//Asignación de un indice del arreglo a un valor
arregloInd ::= ident:a aperturaC INTEGER_LITERAL:b cerraduraC equivalente grupoArreglo:c {: RESULT = a+" = ["+b.toString()+"] = " + c; :};

//Definición del return
returnD ::= returnC ident:a finalExpre{: RESULT = "return " + a + "$"; :}
            | returnC INTEGER_LITERAL:a finalExpre{: RESULT = "return " + a.toString()+ "$"; :}
            | returnC FLOAT_LITERAL:a finalExpre{: RESULT = "return " + a.toString()+ "$"; :}
            ;

//Definición de la función print
print ::= printC aperturaP STRING_LITERAL:a cerraduraP {: RESULT = "print("+a+")"; :};

//Definición de la función input
input ::= inputC aperturaP ident:a cerraduraP {: RESULT = "input("+a+")"; :};

//Definición de uno o más parametros tipados y separados por coma 
param ::= param:a coma param:b {: RESULT = a+","+b; :}
         |tipoVar:a ident:b {: RESULT = a+" "+b; :}
        ;

//Definición de una lista de identificadores
listaIdent ::= listaIdent:a coma listaIdent:b {: RESULT = a+","+b; :}
                |ident:a                      {: RESULT = a; :}
                ;

//Definición de una función capaz de ser asignada, ejemplo: "miFuncion()"
funcionAsig ::= ident:a aperturaP listaParam:b cerraduraP {: RESULT = a+"("+b+")"; :}
                |ident:a aperturaP cerraduraP {: RESULT = a+"()"; :}
                ;

//Definición de la parte inicial de una variable, compuesta de un tipo y un identificador
variable ::= tipoVar:a ident:b 
                {: 
                        comprobarVariable(a.toString(), b.toString());
                :}
                |tipoVar:a ident:b equivalente agrupacionVariable:a {: System.out.println("PARSER: sentencia: " + a + "\n"); :};
            ;

//Agrupación de expresiones capaces de ser declaradas dentro de un bloque especializado o función
declaracion ::= variable:a finalExpre {: RESULT = a+"$"; :}
                |variableAsig:a finalExpre {: RESULT = a+"$"; :}
                |asignacion:a finalExpre {: RESULT = a+"$"; :}
                |operacionNum:a finalExpre {: RESULT = a+"$"; :}
                |funcionAsig:a finalExpre {: RESULT = a+"$"; :}
                |operacionRacNum:a finalExpre {: RESULT = a+"$"; :}
                |arregloSim:a finalExpre {: RESULT = a+"$"; :}
                |arregloAsig:a finalExpre {: RESULT = a+"$"; :}
                |arregloInd:a finalExpre {: RESULT = a+"$"; :}
                |input:a finalExpre {: RESULT = a+"$"; :}
                |print:a finalExpre {: RESULT = a+"$"; :}
                ;

//Definición de una expresión for
forD ::= forC aperturaP variableAsig:a inC ident:b operacionSumaUna:c cerraduraP {: RESULT = "for("+a+" in "+b+c+")"; :}
        |forC aperturaP ident:a inC ident:b operacionSumaUna:c cerraduraP {: RESULT = "for("+a+" in "+b+c+")"; :}
        |forC aperturaP variableAsig:a inC ident:b operacionRestaUna:c cerraduraP {: RESULT = "for("+a+" in "+b+c+")"; :}
        |forC aperturaP ident:a inC ident:b operacionRestaUna:c cerraduraP {: RESULT = "for("+a+" in "+b+c+")"; :}
        ;


//Definición del bloque for, compuesta por su inicialización y un bloque
bloqueFor ::= forD:a aperturaB bloque:b cerraduraB {: RESULT = a+"{"+b+"}"; :}
            | forD:a aperturaB bloque:b BREAK cerraduraB {: RESULT = a+"{"+b+"break$}"; :}
            ;

//Agrupación de expresionesy bloques especializados capaces de ser declaradas dentro de un bloque
sentencia ::= declaracion:a {: RESULT = a; :}
            | bloqueIf:a {: RESULT = a; :}
            | bloqueDoWhile:a {: RESULT = a; :}
            | bloqueFor:a {: RESULT = a; :}
            ;

//Bloque de expresiones o bloques especializados
bloque ::= bloque:a sentencia:b {: RESULT = a+" "+b; System.out.println(RESULT); :}
         | sentencia:a {: RESULT = a; :}
         ;

//Bloque do
doD ::= doC aperturaB bloque:a cerraduraB {: RESULT = "do{"+a+"}"; :}
        |doC aperturaB bloque:a BREAK cerraduraB {: RESULT = "do{"+a+"break$}"; :}
        ;

//Definición de expresión while
whileD ::= whileC aperturaP condicion:a cerraduraP {: RESULT = "while("+a+")"; :};

//Definición de bloque do-While
bloqueDoWhile ::= doD:a whileD:b {: RESULT = a+""+b; :};

//Agrupaciones

//Grupo de expresiones capaces de ser asignadas a una variable
agrupacionVariable ::= funcionAsig:a  {: RESULT = a; :}
                       | caracter:a  {: RESULT = a.toString(); :}
                       | STRING_LITERAL:a  {: RESULT = a; :}
                       | ident:a {: RESULT = a; :}
                       | variableNum:a {: RESULT = a; :}
                       | variableBool:a {: RESULT = a; :}
                       ;

//Comentario de linea
comentarioLineal ::= comentarioL ident:a {: RESULT = "@"+a; :};

//Bloque de comentarios
comentarioBloque ::= comentApert ident:a comentCerrad {: RESULT = "/_ "+a+"_/"; :};

//Agrupación de tipos posibles para variables y arreglos
tipoVar ::= STRING {: RESULT = "string"; :}
        |tipoArr:a {: RESULT = a :}
        |FLOAT {: RESULT = "float"; :}
        ;

tipoArr ::= INT {: RESULT = "int"; :}
        |CHAR {: RESULT = "char"; :}
        ;

//Agrupación de tipos númericos
tipoNum ::=  INT {: RESULT = "int"; :}
            |FLOAT {: RESULT = "float"; :}
            ;

//Agrupación de tipos para una función    
tipoFuncion ::=  tipoNum:a {: RESULT = a; :}
                |BOOLEAN {: RESULT = "boolean"; :}
                ;

//Agrupación de operadores aritmétricos
operacionArit ::= suma {: RESULT = "+"; :}
                |resta {: RESULT = "-"; :}
                |division {: RESULT = "/"; :}
                |multiplicacion {: RESULT = "*"; :}
                |modulo {: RESULT = "~"; :}
                |potencia {: RESULT = "**"; :}
                ;

//Agrupación de operadores racionales
operacionRac ::= menor {: RESULT = "<"; :}
                |mayor {: RESULT = ">"; :}
                |menorIgual {: RESULT = "<="; :}
                |mayorIgual {: RESULT = ">="; :}
                |diferente {: RESULT = "!="; :}
                |igual {: RESULT = "=="; :}
                ;

//Agrupación de operadores lógicos
operacionLog ::= conjuncion {: RESULT = "^"; :}
                |disyuncion {: RESULT = "#"; :}
                ;
