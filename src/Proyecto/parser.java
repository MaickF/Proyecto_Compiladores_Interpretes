
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Proyecto;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\017\005" +
    "\000\002\016\005\000\002\016\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\062\004\000\002" +
    "\063\004\000\002\022\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\021\005\000\002\020\005\000\002\020\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\042\004\000\002\042\006\000\002\042" +
    "\004\000\002\042\004\000\002\005\011\000\002\005\012" +
    "\000\002\005\011\000\002\005\012\000\002\006\011\000" +
    "\002\006\012\000\002\006\011\000\002\006\012\000\002" +
    "\007\006\000\002\007\007\000\002\004\004\000\002\004" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\003\000\002\034\005\000\002\034\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\035\007\000\002\036\007\000\002\037" +
    "\010\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\046\006\000\002\045\006\000\002\047\005\000" +
    "\002\047\004\000\002\047\004\000\002\051\005\000\002" +
    "\051\003\000\002\050\006\000\002\050\005\000\002\053" +
    "\013\000\002\053\012\000\002\057\004\000\002\057\004" +
    "\000\002\061\004\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\040\011\000\002\040\011\000\002\040\011" +
    "\000\002\040\011\000\002\041\006\000\002\041\007\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\013\004\000\002\013\003\000\002\010" +
    "\006\000\002\010\007\000\002\011\006\000\002\012\004" +
    "\000\002\014\011\000\002\014\012\000\002\056\005\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\055" +
    "\004\000\002\043\005\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\025\003\000" +
    "\002\025\003\000\002\024\003\000\002\024\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\027\003\000\002" +
    "\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\010\004\010\006\011\007\007\001\002\000" +
    "\004\036\uff8f\001\002\000\004\036\013\001\002\000\004" +
    "\002\012\001\002\000\004\036\uff90\001\002\000\004\036" +
    "\uff8e\001\002\000\004\036\uff91\001\002\000\004\002\001" +
    "\001\002\000\004\025\014\001\002\000\016\004\021\006" +
    "\024\007\022\010\020\014\015\026\016\001\002\000\004" +
    "\036\uff95\001\002\000\004\021\367\001\002\000\004\036" +
    "\366\001\002\000\004\036\uff93\001\002\000\004\036\365" +
    "\001\002\000\004\036\uff92\001\002\000\006\026\025\063" +
    "\026\001\002\000\004\036\uff94\001\002\000\004\021\030" +
    "\001\002\000\014\004\021\006\024\007\022\010\020\014" +
    "\015\001\002\000\006\026\uffc5\063\uffc5\001\002\000\034" +
    "\004\045\006\024\007\022\010\020\014\015\036\050\066" +
    "\067\067\060\071\041\074\033\076\056\101\063\102\064" +
    "\001\002\000\004\032\364\001\002\000\004\032\363\001" +
    "\002\000\004\025\360\001\002\000\042\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\014\uffa9\022\uffa9\036\uffa9\066" +
    "\uffa9\067\uffa9\071\uffa9\074\uffa9\075\uffa9\076\uffa9\101\uffa9" +
    "\102\uffa9\001\002\000\036\004\045\006\024\007\022\010" +
    "\020\014\015\036\050\066\067\067\060\071\041\074\033" +
    "\075\350\076\056\101\063\102\064\001\002\000\004\036" +
    "\343\001\002\000\046\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\014\uffd4\022\uffd4\036\uffd4\066\uffd4\067\uffd4\071" +
    "\uffd4\072\310\073\312\074\uffd4\075\uffd4\076\uffd4\101\uffd4" +
    "\102\uffd4\001\002\000\032\041\165\042\166\043\162\044" +
    "\163\045\170\050\164\051\201\053\204\054\202\056\207" +
    "\057\203\060\205\001\002\000\004\025\267\001\002\000" +
    "\004\032\266\001\002\000\022\032\ufffa\051\ufffa\053\ufffa" +
    "\054\ufffa\056\ufffa\057\ufffa\060\ufffa\077\ufffa\001\002\000" +
    "\034\032\265\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\050\ufffd\051\ufffd\053\ufffd\054\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\001\002\000\004\036\264\001\002\000\004\032\263" +
    "\001\002\000\042\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\014\uffaa\022\uffaa\036\uffaa\066\uffaa\067\uffaa\071\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\101\uffaa\102\uffaa\001\002\000" +
    "\036\023\256\025\144\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\001\002\000\042\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\014\uffa5\022\uffa5\036\uffa5\066\uffa5\067" +
    "\uffa5\071\uffa5\074\uffa5\075\uffa5\076\uffa5\101\uffa5\102\uffa5" +
    "\001\002\000\006\032\242\047\243\001\002\000\042\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\014\uffa7\022\uffa7" +
    "\036\uffa7\066\uffa7\067\uffa7\071\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\101\uffa7\102\uffa7\001\002\000\004\032\241\001\002" +
    "\000\020\032\240\051\201\053\204\054\202\056\207\057" +
    "\203\060\205\001\002\000\004\025\235\001\002\000\004" +
    "\070\231\001\002\000\004\021\223\001\002\000\006\032" +
    "\222\047\116\001\002\000\042\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\014\uffa8\022\uffa8\036\uffa8\066\uffa8\067" +
    "\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\101\uffa8\102\uffa8" +
    "\001\002\000\044\026\000\032\000\041\000\042\000\043" +
    "\000\044\000\045\000\050\000\051\000\053\000\054\000" +
    "\056\000\057\000\060\000\061\000\062\000\077\000\001" +
    "\002\000\044\026\uffff\032\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\050\uffff\051\uffff\053\uffff\054\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\077\uffff\001\002" +
    "\000\004\032\221\001\002\000\004\021\213\001\002\000" +
    "\004\025\070\001\002\000\016\004\045\006\024\007\022" +
    "\010\020\014\015\036\073\001\002\000\004\047\116\001" +
    "\002\000\004\077\110\001\002\000\004\077\076\001\002" +
    "\000\004\036\075\001\002\000\004\047\uffbc\001\002\000" +
    "\004\036\077\001\002\000\006\046\101\052\103\001\002" +
    "\000\004\026\107\001\002\000\004\036\106\001\002\000" +
    "\004\026\105\001\002\000\004\036\104\001\002\000\004" +
    "\026\ufff5\001\002\000\004\021\uffaf\001\002\000\004\026" +
    "\ufff6\001\002\000\004\021\uffad\001\002\000\004\036\111" +
    "\001\002\000\006\046\101\052\103\001\002\000\004\026" +
    "\115\001\002\000\004\026\114\001\002\000\004\021\uffb0" +
    "\001\002\000\004\021\uffae\001\002\000\020\011\125\036" +
    "\132\037\124\040\127\055\134\101\135\102\136\001\002" +
    "\000\006\032\uff99\077\uff99\001\002\000\012\032\uffe8\061" +
    "\176\062\177\077\uffe8\001\002\000\012\032\uffe9\061\ufff1" +
    "\062\ufff1\077\uffe9\001\002\000\006\061\176\062\177\001" +
    "\002\000\042\032\uff9d\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\050\ufffd\051\ufffd\053\ufffd\054\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\uffef\062\uffef\077\uff9d\001\002\000\006" +
    "\032\uff9c\077\uff9c\001\002\000\006\032\uff9b\077\uff9b\001" +
    "\002\000\006\032\uff98\077\uff98\001\002\000\012\032\uffea" +
    "\061\ufff2\062\ufff2\077\uffea\001\002\000\012\032\uffeb\061" +
    "\ufff3\062\ufff3\077\uffeb\001\002\000\014\026\uffec\032\uffec" +
    "\061\uffec\062\uffec\077\uffec\001\002\000\044\025\144\032" +
    "\uff9a\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe" +
    "\051\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufff0\062\ufff0\077\uff9a\001\002\000\022\032\ufff7\051\201" +
    "\053\204\054\202\056\207\057\203\060\205\077\ufff7\001" +
    "\002\000\010\025\140\036\143\055\134\001\002\000\036" +
    "\032\ufff9\041\000\042\000\043\000\044\000\045\000\050" +
    "\000\051\000\053\000\054\000\056\000\057\000\060\000" +
    "\077\ufff9\001\002\000\036\032\ufff8\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\050\uffff\051\uffff\053\uffff\054\uffff" +
    "\056\uffff\057\uffff\060\uffff\077\ufff8\001\002\000\006\032" +
    "\uff9e\077\uff9e\001\002\000\014\036\155\040\154\055\134" +
    "\101\063\102\064\001\002\000\014\026\uffe7\032\uffe7\061" +
    "\uffe7\062\uffe7\077\uffe7\001\002\000\014\026\uffe4\032\uffe4" +
    "\061\uffe4\062\uffe4\077\uffe4\001\002\000\016\025\144\026" +
    "\uffe5\032\uffe5\061\uffe5\062\uffe5\077\uffe5\001\002\000\006" +
    "\026\145\036\146\001\002\000\044\026\uffbf\032\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\050\uffbf\051\uffbf" +
    "\053\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\077\uffbf\001\002\000\006\026\uffc1\063\uffc1\001\002" +
    "\000\006\026\150\063\151\001\002\000\044\026\uffc0\032" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\077\uffc0\001\002\000\004\036\146\001\002" +
    "\000\006\026\uffc2\063\uffc2\001\002\000\014\026\ufff3\032" +
    "\ufff3\061\ufff3\062\ufff3\077\ufff3\001\002\000\014\026\ufff2" +
    "\032\ufff2\061\ufff2\062\ufff2\077\ufff2\001\002\000\032\025" +
    "\144\026\ufff0\032\ufff0\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\050\ufffe\061\ufff0\062\ufff0\077\ufff0\001\002\000" +
    "\030\026\uffef\032\uffef\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\050\ufffd\061\uffef\062\uffef\077\uffef\001\002\000" +
    "\010\026\174\061\176\062\177\001\002\000\016\041\165" +
    "\042\166\043\162\044\163\045\170\050\164\001\002\000" +
    "\014\026\ufff1\032\ufff1\061\ufff1\062\ufff1\077\ufff1\001\002" +
    "\000\010\036\uff85\101\uff85\102\uff85\001\002\000\010\036" +
    "\uff84\101\uff84\102\uff84\001\002\000\010\036\uff82\101\uff82" +
    "\102\uff82\001\002\000\010\036\uff87\101\uff87\102\uff87\001" +
    "\002\000\010\036\uff86\101\uff86\102\uff86\001\002\000\010" +
    "\036\172\101\063\102\064\001\002\000\010\036\uff83\101" +
    "\uff83\102\uff83\001\002\000\030\026\ufffd\032\ufffd\051\ufffd" +
    "\053\ufffd\054\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\077\ufffd\001\002\000\032\025\144\026\ufffe\032\ufffe" +
    "\051\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\077\ufffe\001\002\000\014\026\ufff4\032\ufff4" +
    "\061\ufff4\062\ufff4\077\ufff4\001\002\000\014\026\uffe6\032" +
    "\uffe6\061\uffe6\062\uffe6\077\uffe6\001\002\000\014\036\155" +
    "\040\154\055\134\101\063\102\064\001\002\000\014\036" +
    "\uff81\040\uff81\055\uff81\101\uff81\102\uff81\001\002\000\014" +
    "\036\uff80\040\uff80\055\uff80\101\uff80\102\uff80\001\002\000" +
    "\014\026\uffed\032\uffed\061\uffed\062\uffed\077\uffed\001\002" +
    "\000\010\036\uff8d\101\uff8d\102\uff8d\001\002\000\010\036" +
    "\uff8c\101\uff8c\102\uff8c\001\002\000\010\036\uff89\101\uff89" +
    "\102\uff89\001\002\000\010\036\uff8a\101\uff8a\102\uff8a\001" +
    "\002\000\010\036\uff88\101\uff88\102\uff88\001\002\000\010" +
    "\036\172\101\063\102\064\001\002\000\010\036\uff8b\101" +
    "\uff8b\102\uff8b\001\002\000\022\032\ufffb\051\ufffb\053\ufffb" +
    "\054\ufffb\056\ufffb\057\ufffb\060\ufffb\077\ufffb\001\002\000" +
    "\014\036\155\040\154\055\134\101\063\102\064\001\002" +
    "\000\014\026\uffee\032\uffee\061\uffee\062\uffee\077\uffee\001" +
    "\002\000\034\004\045\006\024\007\022\010\020\014\015" +
    "\036\050\066\067\067\060\071\041\074\033\076\056\101" +
    "\063\102\064\001\002\000\040\004\045\005\215\006\024" +
    "\007\022\010\020\014\015\022\217\036\050\066\067\067" +
    "\060\071\041\074\033\076\056\101\063\102\064\001\002" +
    "\000\004\022\220\001\002\000\042\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\014\uffa6\022\uffa6\036\uffa6\066\uffa6" +
    "\067\uffa6\071\uffa6\074\uffa6\075\uffa6\076\uffa6\101\uffa6\102" +
    "\uffa6\001\002\000\042\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\014\uffac\022\uffac\036\uffac\066\uffac\067\uffac\071" +
    "\uffac\074\uffac\075\uffac\076\uffac\101\uffac\102\uffac\001\002" +
    "\000\042\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\014" +
    "\uffab\022\uffab\036\uffab\066\uffab\067\uffab\071\uffab\074\uffab" +
    "\075\uffab\076\uffab\101\uffab\102\uffab\001\002\000\042\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\014\uffb3\022\uffb3" +
    "\036\uffb3\066\uffb3\067\uffb3\071\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\101\uffb3\102\uffb3\001\002\000\042\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\014\uffba\022\uffba\036\uffba\066" +
    "\uffba\067\uffba\071\uffba\074\uffba\075\uffba\076\uffba\101\uffba" +
    "\102\uffba\001\002\000\034\004\045\006\024\007\022\010" +
    "\020\014\015\036\050\066\067\067\060\071\041\074\033" +
    "\076\056\101\063\102\064\001\002\000\040\004\045\005" +
    "\225\006\024\007\022\010\020\014\015\022\226\036\050" +
    "\066\067\067\060\071\041\074\033\076\056\101\063\102" +
    "\064\001\002\000\004\022\227\001\002\000\004\070\uffa4" +
    "\001\002\000\004\070\uffa3\001\002\000\042\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\014\uffa1\022\uffa1\036\uffa1" +
    "\066\uffa1\067\uffa1\071\uffa1\074\uffa1\075\uffa1\076\uffa1\101" +
    "\uffa1\102\uffa1\001\002\000\004\025\232\001\002\000\014" +
    "\036\155\040\154\055\134\101\063\102\064\001\002\000" +
    "\010\026\234\061\176\062\177\001\002\000\042\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\014\uffa2\022\uffa2\036" +
    "\uffa2\066\uffa2\067\uffa2\071\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\101\uffa2\102\uffa2\001\002\000\004\011\236\001\002\000" +
    "\004\026\237\001\002\000\004\032\uffc7\001\002\000\042" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\014\uffb8\022" +
    "\uffb8\036\uffb8\066\uffb8\067\uffb8\071\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\101\uffb8\102\uffb8\001\002\000\042\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\014\uffb9\022\uffb9\036\uffb9" +
    "\066\uffb9\067\uffb9\071\uffb9\074\uffb9\075\uffb9\076\uffb9\101" +
    "\uffb9\102\uffb9\001\002\000\042\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\014\uffb5\022\uffb5\036\uffb5\066\uffb5\067" +
    "\uffb5\071\uffb5\074\uffb5\075\uffb5\076\uffb5\101\uffb5\102\uffb5" +
    "\001\002\000\004\023\244\001\002\000\012\011\251\037" +
    "\252\101\246\102\247\001\002\000\006\024\uffd2\063\uffd2" +
    "\001\002\000\010\024\uffd1\032\uffd1\063\uffd1\001\002\000" +
    "\010\024\uffd0\032\uffd0\063\uffd0\001\002\000\006\024\253" +
    "\063\254\001\002\000\010\024\uffce\032\uffce\063\uffce\001" +
    "\002\000\010\024\uffcf\032\uffcf\063\uffcf\001\002\000\004" +
    "\032\uffcc\001\002\000\012\011\251\037\252\101\246\102" +
    "\247\001\002\000\006\024\uffd3\063\uffd3\001\002\000\004" +
    "\101\257\001\002\000\004\024\260\001\002\000\004\047" +
    "\261\001\002\000\012\011\251\037\252\101\246\102\247" +
    "\001\002\000\004\032\uffcb\001\002\000\042\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\022\uffb2\036\uffb2" +
    "\066\uffb2\067\uffb2\071\uffb2\074\uffb2\075\uffb2\076\uffb2\101" +
    "\uffb2\102\uffb2\001\002\000\006\032\uffbb\047\uffbb\001\002" +
    "\000\042\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\014" +
    "\uffb7\022\uffb7\036\uffb7\066\uffb7\067\uffb7\071\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\101\uffb7\102\uffb7\001\002\000\042\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\014\uffb6\022\uffb6" +
    "\036\uffb6\066\uffb6\067\uffb6\071\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\101\uffb6\102\uffb6\001\002\000\014\036\270\040\154" +
    "\055\134\101\063\102\064\001\002\000\026\025\144\026" +
    "\300\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe" +
    "\061\ufff0\062\ufff0\001\002\000\010\026\272\061\176\062" +
    "\177\001\002\000\004\021\273\001\002\000\034\004\045" +
    "\006\024\007\022\010\020\014\015\036\050\066\067\067" +
    "\060\071\041\074\033\076\056\101\063\102\064\001\002" +
    "\000\040\004\045\005\275\006\024\007\022\010\020\014" +
    "\015\022\276\036\050\066\067\067\060\071\041\074\033" +
    "\076\056\101\063\102\064\001\002\000\004\022\277\001" +
    "\002\000\046\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\014\uffe1\022\uffe1\036\uffe1\066\uffe1\067\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\101\uffe1\102\uffe1" +
    "\001\002\000\046\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\014\uffe0\022\uffe0\036\uffe0\066\uffe0\067\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\101\uffe0\102" +
    "\uffe0\001\002\000\004\021\301\001\002\000\034\004\045" +
    "\006\024\007\022\010\020\014\015\036\050\066\067\067" +
    "\060\071\041\074\033\076\056\101\063\102\064\001\002" +
    "\000\040\004\045\005\303\006\024\007\022\010\020\014" +
    "\015\022\304\036\050\066\067\067\060\071\041\074\033" +
    "\076\056\101\063\102\064\001\002\000\004\022\305\001" +
    "\002\000\046\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\014\uffe3\022\uffe3\036\uffe3\066\uffe3\067\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\101\uffe3\102\uffe3" +
    "\001\002\000\046\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\014\uffe2\022\uffe2\036\uffe2\066\uffe2\067\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\101\uffe2\102" +
    "\uffe2\001\002\000\010\036\172\101\063\102\064\001\002" +
    "\000\022\032\ufffc\051\ufffc\053\ufffc\054\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\077\ufffc\001\002\000\004\021\336\001\002" +
    "\000\046\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\014" +
    "\uffd7\022\uffd7\036\uffd7\066\uffd7\067\uffd7\071\uffd7\072\310" +
    "\073\312\074\uffd7\075\uffd7\076\uffd7\101\uffd7\102\uffd7\001" +
    "\002\000\004\025\315\001\002\000\042\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\014\uffd6\022\uffd6\036\uffd6\066" +
    "\uffd6\067\uffd6\071\uffd6\074\uffd6\075\uffd6\076\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\046\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\014\uffd8\022\uffd8\036\uffd8\066\uffd8\067\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\101" +
    "\uffd8\102\uffd8\001\002\000\014\036\316\040\154\055\134" +
    "\101\063\102\064\001\002\000\026\025\144\026\326\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe\061\ufff0" +
    "\062\ufff0\001\002\000\010\026\320\061\176\062\177\001" +
    "\002\000\004\021\321\001\002\000\034\004\045\006\024" +
    "\007\022\010\020\014\015\036\050\066\067\067\060\071" +
    "\041\074\033\076\056\101\063\102\064\001\002\000\040" +
    "\004\045\005\323\006\024\007\022\010\020\014\015\022" +
    "\324\036\050\066\067\067\060\071\041\074\033\076\056" +
    "\101\063\102\064\001\002\000\004\022\325\001\002\000" +
    "\046\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\014\uffdd" +
    "\022\uffdd\036\uffdd\066\uffdd\067\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\101\uffdd\102\uffdd\001\002" +
    "\000\046\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\014" +
    "\uffdc\022\uffdc\036\uffdc\066\uffdc\067\uffdc\071\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\101\uffdc\102\uffdc\001" +
    "\002\000\004\021\327\001\002\000\034\004\045\006\024" +
    "\007\022\010\020\014\015\036\050\066\067\067\060\071" +
    "\041\074\033\076\056\101\063\102\064\001\002\000\040" +
    "\004\045\005\331\006\024\007\022\010\020\014\015\022" +
    "\332\036\050\066\067\067\060\071\041\074\033\076\056" +
    "\101\063\102\064\001\002\000\004\022\333\001\002\000" +
    "\046\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\014\uffdf" +
    "\022\uffdf\036\uffdf\066\uffdf\067\uffdf\071\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\101\uffdf\102\uffdf\001\002" +
    "\000\046\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\014" +
    "\uffde\022\uffde\036\uffde\066\uffde\067\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\101\uffde\102\uffde\001" +
    "\002\000\042\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\014\uffd5\022\uffd5\036\uffd5\066\uffd5\067\uffd5\071\uffd5\074" +
    "\uffd5\075\uffd5\076\uffd5\101\uffd5\102\uffd5\001\002\000\046" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\014\uffd9\022" +
    "\uffd9\036\uffd9\066\uffd9\067\uffd9\071\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\101\uffd9\102\uffd9\001\002\000" +
    "\034\004\045\006\024\007\022\010\020\014\015\036\050" +
    "\066\067\067\060\071\041\074\033\076\056\101\063\102" +
    "\064\001\002\000\040\004\045\005\340\006\024\007\022" +
    "\010\020\014\015\022\341\036\050\066\067\067\060\071" +
    "\041\074\033\076\056\101\063\102\064\001\002\000\004" +
    "\022\342\001\002\000\042\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\014\uffdb\022\uffdb\036\uffdb\066\uffdb\067\uffdb" +
    "\071\uffdb\074\uffdb\075\uffdb\076\uffdb\101\uffdb\102\uffdb\001" +
    "\002\000\042\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\014\uffda\022\uffda\036\uffda\066\uffda\067\uffda\071\uffda\074" +
    "\uffda\075\uffda\076\uffda\101\uffda\102\uffda\001\002\000\010" +
    "\023\344\032\uffbc\047\uffbc\001\002\000\004\101\345\001" +
    "\002\000\004\024\346\001\002\000\006\032\uffcd\047\uffcd" +
    "\001\002\000\004\022\357\001\002\000\010\036\353\101" +
    "\351\102\352\001\002\000\004\032\356\001\002\000\004" +
    "\032\355\001\002\000\004\032\354\001\002\000\004\022" +
    "\uffca\001\002\000\004\022\uffc8\001\002\000\004\022\uffc9" +
    "\001\002\000\004\002\uffbe\001\002\000\004\036\361\001" +
    "\002\000\004\026\362\001\002\000\004\032\uffc6\001\002" +
    "\000\042\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\014" +
    "\uffb1\022\uffb1\036\uffb1\066\uffb1\067\uffb1\071\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\101\uffb1\102\uffb1\001\002\000\042\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\014\uffb4\022\uffb4" +
    "\036\uffb4\066\uffb4\067\uffb4\071\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\101\uffb4\102\uffb4\001\002\000\006\026\uffc3\063\uffc3" +
    "\001\002\000\006\026\uffc4\063\uffc4\001\002\000\034\004" +
    "\045\006\024\007\022\010\020\014\015\036\050\066\067" +
    "\067\060\071\041\074\033\076\056\101\063\102\064\001" +
    "\002\000\036\004\045\006\024\007\022\010\020\014\015" +
    "\036\050\066\067\067\060\071\041\074\033\075\350\076" +
    "\056\101\063\102\064\001\002\000\004\022\372\001\002" +
    "\000\004\002\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\010\024\004\025\003\053\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\022\052\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\026\052\016\001\001\000\002\001\001\000\056\003\033" +
    "\005\036\010\056\012\061\013\034\015\037\016\054\017" +
    "\042\022\041\031\050\035\051\036\030\037\064\040\065" +
    "\041\052\045\045\046\031\050\043\052\035\056\053\057" +
    "\060\061\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\033\005" +
    "\036\010\056\012\061\015\037\016\054\017\042\022\041" +
    "\031\215\035\051\036\030\037\064\040\065\041\052\044" +
    "\346\045\045\046\031\050\043\052\035\056\053\057\060" +
    "\061\046\001\001\000\002\001\001\000\010\004\310\006" +
    "\313\007\312\001\001\000\006\026\305\030\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\205" +
    "\001\001\000\002\001\001\000\004\011\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\073\056\071\057\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\062\101\063\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\062\112\063\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\015\037\016\132\017\042\020\117" +
    "\021\130\022\120\023\121\032\125\042\127\050\122\054" +
    "\116\060\136\001\001\000\002\001\001\000\004\027\174" +
    "\001\001\000\002\001\001\000\004\027\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\205\001\001\000\006" +
    "\042\140\050\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\157\020\156\021\130" +
    "\022\160\023\121\042\152\050\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\174\001\001\000\004" +
    "\030\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\172\050\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\157\022\160\023\177\042" +
    "\152\050\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\207\050\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\157\022\160\023\211\042\152\050\155" +
    "\001\001\000\002\001\001\000\056\003\033\005\036\010" +
    "\056\012\061\013\213\015\037\016\054\017\042\022\041" +
    "\031\050\035\051\036\030\037\064\040\065\041\052\045" +
    "\045\046\031\050\043\052\035\056\053\057\060\061\046" +
    "\001\001\000\054\003\033\005\036\010\056\012\061\015" +
    "\037\016\054\017\042\022\041\031\215\035\051\036\030" +
    "\037\064\040\065\041\052\045\045\046\031\050\043\052" +
    "\035\056\053\057\060\061\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\033\005\036" +
    "\010\056\012\061\013\223\015\037\016\054\017\042\022" +
    "\041\031\050\035\051\036\030\037\064\040\065\041\052" +
    "\045\045\046\031\050\043\052\035\056\053\057\060\061" +
    "\046\001\001\000\054\003\033\005\036\010\056\012\061" +
    "\015\037\016\054\017\042\022\041\031\215\035\051\036" +
    "\030\037\064\040\065\041\052\045\045\046\031\050\043" +
    "\052\035\056\053\057\060\061\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\157\020\232\021\130\022" +
    "\160\023\121\042\152\050\155\001\001\000\004\027\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\244\034" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\244\034\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\157\020\270\021\130\022\160" +
    "\023\121\042\152\050\155\001\001\000\002\001\001\000" +
    "\004\027\174\001\001\000\002\001\001\000\056\003\033" +
    "\005\036\010\056\012\061\013\273\015\037\016\054\017" +
    "\042\022\041\031\050\035\051\036\030\037\064\040\065" +
    "\041\052\045\045\046\031\050\043\052\035\056\053\057" +
    "\060\061\046\001\001\000\054\003\033\005\036\010\056" +
    "\012\061\015\037\016\054\017\042\022\041\031\215\035" +
    "\051\036\030\037\064\040\065\041\052\045\045\046\031" +
    "\050\043\052\035\056\053\057\060\061\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\033\005\036\010\056\012\061\013" +
    "\301\015\037\016\054\017\042\022\041\031\050\035\051" +
    "\036\030\037\064\040\065\041\052\045\045\046\031\050" +
    "\043\052\035\056\053\057\060\061\046\001\001\000\054" +
    "\003\033\005\036\010\056\012\061\015\037\016\054\017" +
    "\042\022\041\031\215\035\051\036\030\037\064\040\065" +
    "\041\052\045\045\046\031\050\043\052\035\056\053\057" +
    "\060\061\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\306\050\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\334\007\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\157\020\316\021\130\022\160\023\121" +
    "\042\152\050\155\001\001\000\002\001\001\000\004\027" +
    "\174\001\001\000\002\001\001\000\056\003\033\005\036" +
    "\010\056\012\061\013\321\015\037\016\054\017\042\022" +
    "\041\031\050\035\051\036\030\037\064\040\065\041\052" +
    "\045\045\046\031\050\043\052\035\056\053\057\060\061" +
    "\046\001\001\000\054\003\033\005\036\010\056\012\061" +
    "\015\037\016\054\017\042\022\041\031\215\035\051\036" +
    "\030\037\064\040\065\041\052\045\045\046\031\050\043" +
    "\052\035\056\053\057\060\061\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\033\005\036\010\056\012\061\013\327\015" +
    "\037\016\054\017\042\022\041\031\050\035\051\036\030" +
    "\037\064\040\065\041\052\045\045\046\031\050\043\052" +
    "\035\056\053\057\060\061\046\001\001\000\054\003\033" +
    "\005\036\010\056\012\061\015\037\016\054\017\042\022" +
    "\041\031\215\035\051\036\030\037\064\040\065\041\052" +
    "\045\045\046\031\050\043\052\035\056\053\057\060\061" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\033\005\036\010\056\012\061\013\336\015\037\016\054" +
    "\017\042\022\041\031\050\035\051\036\030\037\064\040" +
    "\065\041\052\045\045\046\031\050\043\052\035\056\053" +
    "\057\060\061\046\001\001\000\054\003\033\005\036\010" +
    "\056\012\061\015\037\016\054\017\042\022\041\031\215" +
    "\035\051\036\030\037\064\040\065\041\052\045\045\046" +
    "\031\050\043\052\035\056\053\057\060\061\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\033\005\036\010\056\012\061\013\367" +
    "\015\037\016\054\017\042\022\041\031\050\035\051\036" +
    "\030\037\064\040\065\041\052\045\045\046\031\050\043" +
    "\052\035\056\053\057\060\061\046\001\001\000\056\003" +
    "\033\005\036\010\056\012\061\015\037\016\054\017\042" +
    "\022\041\031\215\035\051\036\030\037\064\040\065\041" +
    "\052\044\370\045\045\046\031\050\043\052\035\056\053" +
    "\057\060\061\046\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= funcion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // operando ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operando ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operando ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operando ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacionNumSim ::= operando operacionArit operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNumSim",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacionNum ::= operacionNum operacionArit operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNum",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacionNum ::= operacionNumSim 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNum",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variableNum ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variableNum ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variableNum ::= operacionNum 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacionSumaUna ::= aumento ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++" + a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionSumaUna",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacionRestaUna ::= decremento ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--" + a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRestaUna",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacionRacNum ::= operando operacionRac operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b+""+c ; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRacNum",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operandoBool ::= expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operandoBool ::= bool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operandoBool ::= operacionRacNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operandoBool ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operandoBool ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicionSim ::= operandoBool operacionLog operandoBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b+""+c; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionSim",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion ::= condicion operacionLog operandoBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b+""+c; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion ::= condicionSim 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variableBool ::= expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variableBool ::= bool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variableBool ::= operacionRacNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variableBool ::= condicion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expNegada ::= negacion expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expNegada ::= negacion aperturaP condicion cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!"+"("+a+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expNegada ::= negacion ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expNegada ::= negacion funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifD ::= ifC aperturaP ident cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if (" + a + "){"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifD ::= ifC aperturaP ident cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "if (" + a + "){"+b+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifD ::= ifC aperturaP condicion cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if (" + a + "){"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifD ::= ifC aperturaP condicion cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "if (" + a + "){"+b+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elif ::= elifC aperturaP ident cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "elif (" + a + "){"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elif ::= elifC aperturaP ident cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "elif (" + a + "){"+b+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elif ::= elifC aperturaP condicion cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if (" + a + "){"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elif ::= elifC aperturaP condicion cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "elif (" + a + "){"+b+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elseD ::= elseC aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "else{"+a+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseD",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elseD ::= elseC aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "else{"+a+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseD",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloqueElif ::= bloqueElif elif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElif",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloqueElif ::= elif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElif",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloqueIf ::= ifD bloqueElif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloqueIf ::= ifD elseD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloqueIf ::= ifD bloqueElif elseD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b+""+c; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloqueIf ::= ifD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista ::= lista coma lista 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l1+","+l2; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista ::= grupoArreglo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // grupoArreglo ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // grupoArreglo ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // grupoArreglo ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // grupoArreglo ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arregloSim ::= tipoVarArr ident aperturaC INTEGER_LITERAL cerraduraC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "tipo "+a+" ["+b.toString()+"]"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSim",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arregloAsig ::= arregloSim equivalente aperturaC lista cerraduraC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+" = [" +b+"]";  System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloAsig",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arregloInd ::= ident aperturaC INTEGER_LITERAL cerraduraC equivalente grupoArreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" = [" +b.toString()+"] = " + c;  System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloInd",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // returnD ::= returnC ident finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a + "$"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returnD ::= returnC INTEGER_LITERAL finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a.toString()+ "$"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // returnD ::= returnC FLOAT_LITERAL finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a.toString()+ "$"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // print ::= printC aperturaP STRING_LITERAL cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "print(" + a + ")"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // input ::= inputC aperturaP ident cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "input(" + a + ")"; System.out.println(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param ::= param coma param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+","+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param ::= tipoVarArr ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // param ::= BOOLEAN ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaIdent ::= listaIdent coma listaIdent 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+","+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdent",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaIdent ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdent",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcionAsig ::= ident aperturaP listaIdent cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"("+b+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionAsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funcionAsig ::= ident aperturaP cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = a+"()"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionAsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funcion ::= tipoFuncion ident aperturaP param cerraduraP aperturaB bloque returnD cerraduraB 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x+" "+ a+ "("+b+")"+"{"+c+d+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcion ::= tipoFuncion ident aperturaP cerraduraP aperturaB bloque returnD cerraduraB 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x+" "+ a+ "()"+"{"+c+d+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable ::= tipoVarArr ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+ " " +b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable ::= BOOLEAN ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+ " " +b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion ::= variable finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion ::= variableAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion ::= operacionNum finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion ::= funcionAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion ::= operacionRacNum finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion ::= arregloSim finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion ::= arregloAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion ::= arregloInd finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion ::= input finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion ::= print finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // forD ::= forC aperturaP variableAsig inC ident operacionSumaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // forD ::= forC aperturaP ident inC ident operacionSumaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // forD ::= forC aperturaP variableAsig inC ident operacionRestaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forD ::= forC aperturaP ident inC ident operacionRestaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bloqueFor ::= forD aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"{"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloqueFor ::= forD aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = a+"{"+b+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= bloqueIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= bloqueDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= bloqueFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bloque ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // doD ::= doC aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "do{"+a+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // doD ::= doC aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "do{"+a+"break$}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // whileD ::= whileC aperturaP condicion cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while("+a+")"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileD",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloqueDoWhile ::= doD whileD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDoWhile",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funMain ::= tipoFuncion mainC aperturaP cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+" main(){"+b+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funMain",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funMain ::= tipoFuncion mainC aperturaP param cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+" main("+b+"){"+c+"}"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funMain",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variableAsig ::= variable equivalente agrupacionVariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" = "+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableAsig",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // agrupacionVariable ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // agrupacionVariable ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // agrupacionVariable ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // agrupacionVariable ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // agrupacionVariable ::= variableNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // agrupacionVariable ::= variableBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comentarioLineal ::= comentarioL ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "@"+a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarioLineal",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comentarioBloque ::= comentApert ident comentCerrad 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "/_ "+a+"_/"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarioBloque",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipoVarArr ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipoVarArr ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipoVarArr ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipoVarArr ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipoNum ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoNum",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipoNum ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoNum",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipoFuncion ::= tipoNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipoFuncion ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacionArit ::= suma 
            {
              Object RESULT =null;
		 RESULT = "+"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacionArit ::= resta 
            {
              Object RESULT =null;
		 RESULT = "-"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operacionArit ::= division 
            {
              Object RESULT =null;
		 RESULT = "/"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operacionArit ::= multiplicacion 
            {
              Object RESULT =null;
		 RESULT = "*"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operacionArit ::= modulo 
            {
              Object RESULT =null;
		 RESULT = "~"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacionArit ::= potencia 
            {
              Object RESULT =null;
		 RESULT = "**"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacionRac ::= menor 
            {
              Object RESULT =null;
		 RESULT = "<"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacionRac ::= mayor 
            {
              Object RESULT =null;
		 RESULT = ">"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacionRac ::= menorIgual 
            {
              Object RESULT =null;
		 RESULT = "<="; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacionRac ::= mayorIgual 
            {
              Object RESULT =null;
		 RESULT = ">="; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacionRac ::= diferente 
            {
              Object RESULT =null;
		 RESULT = "!="; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacionRac ::= igual 
            {
              Object RESULT =null;
		 RESULT = "=="; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacionLog ::= conjuncion 
            {
              Object RESULT =null;
		 RESULT = "^"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLog",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacionLog ::= disyuncion 
            {
              Object RESULT =null;
		 RESULT = "#"; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLog",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
