
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Proyecto;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Hash;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\070\004\000\002\073" +
    "\004\000\002\067\012\000\002\067\011\000\002\066\004" +
    "\000\002\066\003\000\002\065\010\000\002\064\004\000" +
    "\002\064\003\000\002\063\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\017" +
    "\005\000\002\016\005\000\002\016\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\061\004\000" +
    "\002\062\004\000\002\022\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\021\005\000\002\020\005\000\002\020\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\042\004\000\002\042\006\000\002" +
    "\042\004\000\002\042\004\000\002\005\011\000\002\005" +
    "\012\000\002\005\011\000\002\005\012\000\002\006\011" +
    "\000\002\006\012\000\002\006\011\000\002\006\012\000" +
    "\002\007\006\000\002\007\007\000\002\004\004\000\002" +
    "\004\003\000\002\003\004\000\002\003\004\000\002\003" +
    "\005\000\002\003\003\000\002\034\005\000\002\034\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\035\007\000\002\036\007\000\002" +
    "\037\010\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\046\006\000\002\045\006\000\002\047\005" +
    "\000\002\047\004\000\002\047\004\000\002\051\005\000" +
    "\002\051\003\000\002\050\006\000\002\050\005\000\002" +
    "\056\004\000\002\056\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\004\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\040\011\000\002" +
    "\040\011\000\002\040\011\000\002\040\011\000\002\041" +
    "\006\000\002\041\007\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\013\004\000" +
    "\002\013\003\000\002\010\006\000\002\010\007\000\002" +
    "\011\006\000\002\012\004\000\002\055\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\054\004\000" +
    "\002\043\005\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\025\003\000\002\025" +
    "\003\000\002\024\003\000\002\024\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\010\004\006\006\004\007\016\001\002\000" +
    "\006\036\uff8b\065\uff8b\001\002\000\006\036\u0107\065\u0108" +
    "\001\002\000\006\036\uff88\065\uff88\001\002\000\004\002" +
    "\ufff8\001\002\000\004\002\ufff7\001\002\000\004\025\356" +
    "\001\002\000\010\004\006\006\004\007\016\001\002\000" +
    "\004\025\021\001\002\000\010\004\ufffb\006\ufffb\007\ufffb" +
    "\001\002\000\004\002\020\001\002\000\006\036\uff8a\065" +
    "\uff8a\001\002\000\006\036\uff89\065\uff89\001\002\000\004" +
    "\002\001\001\002\000\004\026\022\001\002\000\004\021" +
    "\023\001\002\000\034\004\044\006\026\007\050\010\027" +
    "\014\045\036\046\066\066\067\057\071\036\074\030\076" +
    "\055\101\062\102\063\001\002\000\004\032\353\001\002" +
    "\000\004\032\352\001\002\000\004\036\uff8e\001\002\000" +
    "\004\036\uff8d\001\002\000\004\025\347\001\002\000\042" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\014\uffa1\022" +
    "\uffa1\036\uffa1\066\uffa1\067\uffa1\071\uffa1\074\uffa1\075\uffa1" +
    "\076\uffa1\101\uffa1\102\uffa1\001\002\000\036\004\044\006" +
    "\026\007\050\010\027\014\045\022\346\036\046\066\066" +
    "\067\057\071\036\074\030\076\055\101\062\102\063\001" +
    "\002\000\004\036\342\001\002\000\046\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\014\uffca\022\uffca\036\uffca\066" +
    "\uffca\067\uffca\071\uffca\072\307\073\311\074\uffca\075\uffca" +
    "\076\uffca\101\uffca\102\uffca\001\002\000\032\041\164\042" +
    "\165\043\161\044\162\045\166\050\163\051\200\053\203" +
    "\054\201\056\206\057\202\060\204\001\002\000\004\025" +
    "\266\001\002\000\022\032\ufff0\051\ufff0\053\ufff0\054\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\077\ufff0\001\002\000\004\032" +
    "\265\001\002\000\034\032\264\041\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\001\002\000\042\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\014\uffa2\022\uffa2\036\uffa2\066" +
    "\uffa2\067\uffa2\071\uffa2\074\uffa2\075\uffa2\076\uffa2\101\uffa2" +
    "\102\uffa2\001\002\000\004\032\263\001\002\000\004\036" +
    "\262\001\002\000\004\036\uff8f\001\002\000\036\023\255" +
    "\025\143\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\050" +
    "\ufff4\051\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\001\002\000\042\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\014\uff9d\022\uff9d\036\uff9d\066\uff9d\067\uff9d\071\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\101\uff9d\102\uff9d\001\002\000" +
    "\004\036\uff8c\001\002\000\006\032\241\047\242\001\002" +
    "\000\042\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\014" +
    "\uff9f\022\uff9f\036\uff9f\066\uff9f\067\uff9f\071\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\101\uff9f\102\uff9f\001\002\000\004\032" +
    "\240\001\002\000\020\032\237\051\200\053\203\054\201" +
    "\056\206\057\202\060\204\001\002\000\004\025\234\001" +
    "\002\000\004\070\230\001\002\000\004\021\222\001\002" +
    "\000\006\032\221\047\115\001\002\000\042\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\014\uffa0\022\uffa0\036\uffa0" +
    "\066\uffa0\067\uffa0\071\uffa0\074\uffa0\075\uffa0\076\uffa0\101" +
    "\uffa0\102\uffa0\001\002\000\044\026\ufff6\032\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\051\ufff6\053" +
    "\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\077\ufff6\001\002\000\044\026\ufff5\032\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\050\ufff5\051\ufff5\053\ufff5" +
    "\054\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\077" +
    "\ufff5\001\002\000\004\032\220\001\002\000\004\021\212" +
    "\001\002\000\004\025\067\001\002\000\016\004\044\006" +
    "\026\007\050\010\027\014\045\036\072\001\002\000\004" +
    "\047\115\001\002\000\004\077\107\001\002\000\004\077" +
    "\075\001\002\000\004\036\074\001\002\000\004\047\uffb4" +
    "\001\002\000\004\036\076\001\002\000\006\046\100\052" +
    "\102\001\002\000\004\026\106\001\002\000\004\036\105" +
    "\001\002\000\004\026\104\001\002\000\004\036\103\001" +
    "\002\000\004\026\uffeb\001\002\000\004\021\uffa7\001\002" +
    "\000\004\026\uffec\001\002\000\004\021\uffa5\001\002\000" +
    "\004\036\110\001\002\000\006\046\100\052\102\001\002" +
    "\000\004\026\114\001\002\000\004\026\113\001\002\000" +
    "\004\021\uffa8\001\002\000\004\021\uffa6\001\002\000\020" +
    "\011\124\036\131\037\123\040\126\055\133\101\134\102" +
    "\135\001\002\000\006\032\uff93\077\uff93\001\002\000\012" +
    "\032\uffde\061\175\062\176\077\uffde\001\002\000\012\032" +
    "\uffdf\061\uffe7\062\uffe7\077\uffdf\001\002\000\006\061\175" +
    "\062\176\001\002\000\042\032\uff97\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\uffe5\062\uffe5\077\uff97\001" +
    "\002\000\006\032\uff96\077\uff96\001\002\000\006\032\uff95" +
    "\077\uff95\001\002\000\006\032\uff92\077\uff92\001\002\000" +
    "\012\032\uffe0\061\uffe8\062\uffe8\077\uffe0\001\002\000\012" +
    "\032\uffe1\061\uffe9\062\uffe9\077\uffe1\001\002\000\014\026" +
    "\uffe2\032\uffe2\061\uffe2\062\uffe2\077\uffe2\001\002\000\044" +
    "\025\143\032\uff94\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\uffe6\062\uffe6\077\uff94\001\002\000\022\032" +
    "\uffed\051\200\053\203\054\201\056\206\057\202\060\204" +
    "\077\uffed\001\002\000\010\025\137\036\142\055\133\001" +
    "\002\000\036\032\uffef\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\077\uffef\001\002\000\036\032\uffee\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\050\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\056\ufff5\057\ufff5\060\ufff5\077\uffee\001\002" +
    "\000\006\032\uff98\077\uff98\001\002\000\014\036\154\040" +
    "\153\055\133\101\062\102\063\001\002\000\014\026\uffdd" +
    "\032\uffdd\061\uffdd\062\uffdd\077\uffdd\001\002\000\014\026" +
    "\uffda\032\uffda\061\uffda\062\uffda\077\uffda\001\002\000\016" +
    "\025\143\026\uffdb\032\uffdb\061\uffdb\062\uffdb\077\uffdb\001" +
    "\002\000\006\026\144\036\145\001\002\000\044\026\uffb5" +
    "\032\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\050" +
    "\uffb5\051\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\077\uffb5\001\002\000\006\026\uffb7\063" +
    "\uffb7\001\002\000\006\026\147\063\150\001\002\000\044" +
    "\026\uffb6\032\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\077\uffb6\001\002\000\004\036" +
    "\145\001\002\000\006\026\uffb8\063\uffb8\001\002\000\014" +
    "\026\uffe9\032\uffe9\061\uffe9\062\uffe9\077\uffe9\001\002\000" +
    "\014\026\uffe8\032\uffe8\061\uffe8\062\uffe8\077\uffe8\001\002" +
    "\000\032\025\143\026\uffe6\032\uffe6\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\050\ufff4\061\uffe6\062\uffe6\077\uffe6" +
    "\001\002\000\030\026\uffe5\032\uffe5\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\050\ufff3\061\uffe5\062\uffe5\077\uffe5" +
    "\001\002\000\010\026\174\061\175\062\176\001\002\000" +
    "\016\041\164\042\165\043\161\044\162\045\166\050\163" +
    "\001\002\000\014\026\uffe7\032\uffe7\061\uffe7\062\uffe7\077" +
    "\uffe7\001\002\000\010\036\uff7f\101\uff7f\102\uff7f\001\002" +
    "\000\010\036\uff7e\101\uff7e\102\uff7e\001\002\000\010\036" +
    "\uff7c\101\uff7c\102\uff7c\001\002\000\010\036\uff81\101\uff81" +
    "\102\uff81\001\002\000\010\036\uff80\101\uff80\102\uff80\001" +
    "\002\000\010\036\uff7d\101\uff7d\102\uff7d\001\002\000\010" +
    "\036\172\101\062\102\063\001\002\000\030\026\ufff3\032" +
    "\ufff3\051\ufff3\053\ufff3\054\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\077\ufff3\001\002\000\014\026\uffea\032" +
    "\uffea\061\uffea\062\uffea\077\uffea\001\002\000\032\025\143" +
    "\026\ufff4\032\ufff4\051\ufff4\053\ufff4\054\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\077\ufff4\001\002\000\014" +
    "\036\154\040\153\055\133\101\062\102\063\001\002\000" +
    "\014\026\uffdc\032\uffdc\061\uffdc\062\uffdc\077\uffdc\001\002" +
    "\000\014\036\uff7b\040\uff7b\055\uff7b\101\uff7b\102\uff7b\001" +
    "\002\000\014\036\uff7a\040\uff7a\055\uff7a\101\uff7a\102\uff7a" +
    "\001\002\000\014\026\uffe3\032\uffe3\061\uffe3\062\uffe3\077" +
    "\uffe3\001\002\000\010\036\uff87\101\uff87\102\uff87\001\002" +
    "\000\010\036\uff86\101\uff86\102\uff86\001\002\000\010\036" +
    "\uff83\101\uff83\102\uff83\001\002\000\010\036\uff84\101\uff84" +
    "\102\uff84\001\002\000\010\036\uff82\101\uff82\102\uff82\001" +
    "\002\000\010\036\172\101\062\102\063\001\002\000\010" +
    "\036\uff85\101\uff85\102\uff85\001\002\000\022\032\ufff1\051" +
    "\ufff1\053\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1\077\ufff1" +
    "\001\002\000\014\036\154\040\153\055\133\101\062\102" +
    "\063\001\002\000\014\026\uffe4\032\uffe4\061\uffe4\062\uffe4" +
    "\077\uffe4\001\002\000\034\004\044\006\026\007\050\010" +
    "\027\014\045\036\046\066\066\067\057\071\036\074\030" +
    "\076\055\101\062\102\063\001\002\000\040\004\044\005" +
    "\214\006\026\007\050\010\027\014\045\022\216\036\046" +
    "\066\066\067\057\071\036\074\030\076\055\101\062\102" +
    "\063\001\002\000\004\022\217\001\002\000\042\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\014\uff9e\022\uff9e\036" +
    "\uff9e\066\uff9e\067\uff9e\071\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\101\uff9e\102\uff9e\001\002\000\042\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\014\uffa4\022\uffa4\036\uffa4\066\uffa4" +
    "\067\uffa4\071\uffa4\074\uffa4\075\uffa4\076\uffa4\101\uffa4\102" +
    "\uffa4\001\002\000\042\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\014\uffa3\022\uffa3\036\uffa3\066\uffa3\067\uffa3\071" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\101\uffa3\102\uffa3\001\002" +
    "\000\042\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\014" +
    "\uffab\022\uffab\036\uffab\066\uffab\067\uffab\071\uffab\074\uffab" +
    "\075\uffab\076\uffab\101\uffab\102\uffab\001\002\000\042\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\022\uffb2" +
    "\036\uffb2\066\uffb2\067\uffb2\071\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\101\uffb2\102\uffb2\001\002\000\034\004\044\006\026" +
    "\007\050\010\027\014\045\036\046\066\066\067\057\071" +
    "\036\074\030\076\055\101\062\102\063\001\002\000\040" +
    "\004\044\005\224\006\026\007\050\010\027\014\045\022" +
    "\225\036\046\066\066\067\057\071\036\074\030\076\055" +
    "\101\062\102\063\001\002\000\004\022\226\001\002\000" +
    "\004\070\uff9c\001\002\000\004\070\uff9b\001\002\000\042" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\014\uff99\022" +
    "\uff99\036\uff99\066\uff99\067\uff99\071\uff99\074\uff99\075\uff99" +
    "\076\uff99\101\uff99\102\uff99\001\002\000\004\025\231\001" +
    "\002\000\014\036\154\040\153\055\133\101\062\102\063" +
    "\001\002\000\010\026\233\061\175\062\176\001\002\000" +
    "\042\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\014\uff9a" +
    "\022\uff9a\036\uff9a\066\uff9a\067\uff9a\071\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\101\uff9a\102\uff9a\001\002\000\004\011\235" +
    "\001\002\000\004\026\236\001\002\000\004\032\uffbd\001" +
    "\002\000\042\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\014\uffb0\022\uffb0\036\uffb0\066\uffb0\067\uffb0\071\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\101\uffb0\102\uffb0\001\002\000\042" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\014\uffb1\022" +
    "\uffb1\036\uffb1\066\uffb1\067\uffb1\071\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\101\uffb1\102\uffb1\001\002\000\042\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\014\uffad\022\uffad\036\uffad" +
    "\066\uffad\067\uffad\071\uffad\074\uffad\075\uffad\076\uffad\101" +
    "\uffad\102\uffad\001\002\000\004\023\243\001\002\000\012" +
    "\011\250\037\251\101\245\102\246\001\002\000\006\024" +
    "\uffc8\063\uffc8\001\002\000\010\024\uffc7\032\uffc7\063\uffc7" +
    "\001\002\000\010\024\uffc6\032\uffc6\063\uffc6\001\002\000" +
    "\006\024\252\063\253\001\002\000\010\024\uffc4\032\uffc4" +
    "\063\uffc4\001\002\000\010\024\uffc5\032\uffc5\063\uffc5\001" +
    "\002\000\004\032\uffc2\001\002\000\012\011\250\037\251" +
    "\101\245\102\246\001\002\000\006\024\uffc9\063\uffc9\001" +
    "\002\000\004\101\256\001\002\000\004\024\257\001\002" +
    "\000\004\047\260\001\002\000\012\011\250\037\251\101" +
    "\245\102\246\001\002\000\004\032\uffc1\001\002\000\006" +
    "\032\uffb3\047\uffb3\001\002\000\042\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\014\uffaa\022\uffaa\036\uffaa\066\uffaa" +
    "\067\uffaa\071\uffaa\074\uffaa\075\uffaa\076\uffaa\101\uffaa\102" +
    "\uffaa\001\002\000\042\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\014\uffaf\022\uffaf\036\uffaf\066\uffaf\067\uffaf\071" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\101\uffaf\102\uffaf\001\002" +
    "\000\042\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\014" +
    "\uffae\022\uffae\036\uffae\066\uffae\067\uffae\071\uffae\074\uffae" +
    "\075\uffae\076\uffae\101\uffae\102\uffae\001\002\000\014\036" +
    "\267\040\153\055\133\101\062\102\063\001\002\000\026" +
    "\025\143\026\277\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\050\ufff4\061\uffe6\062\uffe6\001\002\000\010\026\271" +
    "\061\175\062\176\001\002\000\004\021\272\001\002\000" +
    "\034\004\044\006\026\007\050\010\027\014\045\036\046" +
    "\066\066\067\057\071\036\074\030\076\055\101\062\102" +
    "\063\001\002\000\040\004\044\005\274\006\026\007\050" +
    "\010\027\014\045\022\275\036\046\066\066\067\057\071" +
    "\036\074\030\076\055\101\062\102\063\001\002\000\004" +
    "\022\276\001\002\000\046\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\014\uffd7\022\uffd7\036\uffd7\066\uffd7\067\uffd7" +
    "\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\101" +
    "\uffd7\102\uffd7\001\002\000\046\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\014\uffd6\022\uffd6\036\uffd6\066\uffd6\067" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\101\uffd6\102\uffd6\001\002\000\004\021\300\001\002\000" +
    "\034\004\044\006\026\007\050\010\027\014\045\036\046" +
    "\066\066\067\057\071\036\074\030\076\055\101\062\102" +
    "\063\001\002\000\040\004\044\005\302\006\026\007\050" +
    "\010\027\014\045\022\303\036\046\066\066\067\057\071" +
    "\036\074\030\076\055\101\062\102\063\001\002\000\004" +
    "\022\304\001\002\000\046\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\014\uffd9\022\uffd9\036\uffd9\066\uffd9\067\uffd9" +
    "\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\101" +
    "\uffd9\102\uffd9\001\002\000\046\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\014\uffd8\022\uffd8\036\uffd8\066\uffd8\067" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8" +
    "\101\uffd8\102\uffd8\001\002\000\010\036\172\101\062\102" +
    "\063\001\002\000\022\032\ufff2\051\ufff2\053\ufff2\054\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\077\ufff2\001\002\000\004\021" +
    "\335\001\002\000\046\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\014\uffcd\022\uffcd\036\uffcd\066\uffcd\067\uffcd\071" +
    "\uffcd\072\307\073\311\074\uffcd\075\uffcd\076\uffcd\101\uffcd" +
    "\102\uffcd\001\002\000\004\025\314\001\002\000\042\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\014\uffcc\022\uffcc" +
    "\036\uffcc\066\uffcc\067\uffcc\071\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\101\uffcc\102\uffcc\001\002\000\046\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\014\uffce\022\uffce\036\uffce\066" +
    "\uffce\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\101\uffce\102\uffce\001\002\000\014\036\315\040" +
    "\153\055\133\101\062\102\063\001\002\000\026\025\143" +
    "\026\325\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\050" +
    "\ufff4\061\uffe6\062\uffe6\001\002\000\010\026\317\061\175" +
    "\062\176\001\002\000\004\021\320\001\002\000\034\004" +
    "\044\006\026\007\050\010\027\014\045\036\046\066\066" +
    "\067\057\071\036\074\030\076\055\101\062\102\063\001" +
    "\002\000\040\004\044\005\322\006\026\007\050\010\027" +
    "\014\045\022\323\036\046\066\066\067\057\071\036\074" +
    "\030\076\055\101\062\102\063\001\002\000\004\022\324" +
    "\001\002\000\046\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\014\uffd3\022\uffd3\036\uffd3\066\uffd3\067\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\101\uffd3\102" +
    "\uffd3\001\002\000\046\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\014\uffd2\022\uffd2\036\uffd2\066\uffd2\067\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\101\uffd2" +
    "\102\uffd2\001\002\000\004\021\326\001\002\000\034\004" +
    "\044\006\026\007\050\010\027\014\045\036\046\066\066" +
    "\067\057\071\036\074\030\076\055\101\062\102\063\001" +
    "\002\000\040\004\044\005\330\006\026\007\050\010\027" +
    "\014\045\022\331\036\046\066\066\067\057\071\036\074" +
    "\030\076\055\101\062\102\063\001\002\000\004\022\332" +
    "\001\002\000\046\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\014\uffd5\022\uffd5\036\uffd5\066\uffd5\067\uffd5\071\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\101\uffd5\102" +
    "\uffd5\001\002\000\046\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\014\uffd4\022\uffd4\036\uffd4\066\uffd4\067\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\101\uffd4" +
    "\102\uffd4\001\002\000\046\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\014\uffcf\022\uffcf\036\uffcf\066\uffcf\067\uffcf" +
    "\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\101" +
    "\uffcf\102\uffcf\001\002\000\042\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\014\uffcb\022\uffcb\036\uffcb\066\uffcb\067" +
    "\uffcb\071\uffcb\074\uffcb\075\uffcb\076\uffcb\101\uffcb\102\uffcb" +
    "\001\002\000\034\004\044\006\026\007\050\010\027\014" +
    "\045\036\046\066\066\067\057\071\036\074\030\076\055" +
    "\101\062\102\063\001\002\000\040\004\044\005\337\006" +
    "\026\007\050\010\027\014\045\022\340\036\046\066\066" +
    "\067\057\071\036\074\030\076\055\101\062\102\063\001" +
    "\002\000\004\022\341\001\002\000\042\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\014\uffd1\022\uffd1\036\uffd1\066" +
    "\uffd1\067\uffd1\071\uffd1\074\uffd1\075\uffd1\076\uffd1\101\uffd1" +
    "\102\uffd1\001\002\000\042\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\014\uffd0\022\uffd0\036\uffd0\066\uffd0\067\uffd0" +
    "\071\uffd0\074\uffd0\075\uffd0\076\uffd0\101\uffd0\102\uffd0\001" +
    "\002\000\010\023\343\032\uffb4\047\uffb4\001\002\000\004" +
    "\101\344\001\002\000\004\024\345\001\002\000\006\032" +
    "\uffc3\047\uffc3\001\002\000\004\002\ufffa\001\002\000\004" +
    "\036\350\001\002\000\004\026\351\001\002\000\004\032" +
    "\uffbc\001\002\000\042\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\014\uffa9\022\uffa9\036\uffa9\066\uffa9\067\uffa9\071" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\101\uffa9\102\uffa9\001\002" +
    "\000\042\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\014" +
    "\uffac\022\uffac\036\uffac\066\uffac\067\uffac\071\uffac\074\uffac" +
    "\075\uffac\076\uffac\101\uffac\102\uffac\001\002\000\004\002" +
    "\ufff9\001\002\000\010\004\ufffc\006\ufffc\007\ufffc\001\002" +
    "\000\016\004\361\006\026\007\050\010\027\014\045\026" +
    "\357\001\002\000\004\021\u0103\001\002\000\004\036\u0102" +
    "\001\002\000\004\036\u0101\001\002\000\006\026\363\063" +
    "\364\001\002\000\004\021\366\001\002\000\014\004\361" +
    "\006\026\007\050\010\027\014\045\001\002\000\006\026" +
    "\uffbb\063\uffbb\001\002\000\034\004\044\006\026\007\050" +
    "\010\027\014\045\036\046\066\066\067\057\071\036\074" +
    "\030\076\055\101\062\102\063\001\002\000\036\004\044" +
    "\006\026\007\050\010\027\014\045\036\046\066\066\067" +
    "\057\071\036\074\030\075\371\076\055\101\062\102\063" +
    "\001\002\000\004\022\u0100\001\002\000\010\036\374\101" +
    "\372\102\373\001\002\000\004\032\377\001\002\000\004" +
    "\032\376\001\002\000\004\032\375\001\002\000\004\022" +
    "\uffc0\001\002\000\004\022\uffbe\001\002\000\004\022\uffbf" +
    "\001\002\000\010\004\ufffe\006\ufffe\007\ufffe\001\002\000" +
    "\006\026\uffb9\063\uffb9\001\002\000\006\026\uffba\063\uffba" +
    "\001\002\000\034\004\044\006\026\007\050\010\027\014" +
    "\045\036\046\066\066\067\057\071\036\074\030\076\055" +
    "\101\062\102\063\001\002\000\036\004\044\006\026\007" +
    "\050\010\027\014\045\036\046\066\066\067\057\071\036" +
    "\074\030\075\371\076\055\101\062\102\063\001\002\000" +
    "\004\022\u0106\001\002\000\010\004\ufffd\006\ufffd\007\ufffd" +
    "\001\002\000\004\025\000\001\002\000\004\025\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\024\024\004\025\016\063\014\064\007\065" +
    "\006\066\011\067\013\070\010\073\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\004" +
    "\025\016\065\353\067\354\070\010\073\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\030\005\033\010\055" +
    "\012\060\013\031\015\034\016\053\017\036\022\037\031" +
    "\046\035\050\036\023\037\063\040\064\041\051\045\042" +
    "\046\024\050\040\052\032\055\052\056\057\060\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\030\005\033\010\055\012\060\015\034\016\053" +
    "\017\036\022\037\031\214\035\050\036\023\037\063\040" +
    "\064\041\051\045\042\046\024\050\040\052\032\055\052" +
    "\056\057\060\041\001\001\000\002\001\001\000\010\004" +
    "\307\006\312\007\311\001\001\000\006\026\304\030\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\204\001\001\000" +
    "\002\001\001\000\004\011\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\072\055\070\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\061" +
    "\100\062\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\111\062\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\015\034\016\131\017\036\020\116\021\127\022" +
    "\117\023\120\032\124\042\126\050\121\053\115\057\135" +
    "\001\001\000\002\001\001\000\004\027\172\001\001\000" +
    "\002\001\001\000\004\027\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\204\001\001\000\006\042\137\050" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\156\020\155\021\127\022\157\023" +
    "\120\042\151\050\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\172\001\001\000\004\030\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\170\050\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\156\022\157\023\176\042\151\050\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\206\050" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\156\022\157\023\210\042\151\050\154\001\001\000" +
    "\002\001\001\000\056\003\030\005\033\010\055\012\060" +
    "\013\212\015\034\016\053\017\036\022\037\031\046\035" +
    "\050\036\023\037\063\040\064\041\051\045\042\046\024" +
    "\050\040\052\032\055\052\056\057\060\041\001\001\000" +
    "\054\003\030\005\033\010\055\012\060\015\034\016\053" +
    "\017\036\022\037\031\214\035\050\036\023\037\063\040" +
    "\064\041\051\045\042\046\024\050\040\052\032\055\052" +
    "\056\057\060\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\030\005\033\010\055\012" +
    "\060\013\222\015\034\016\053\017\036\022\037\031\046" +
    "\035\050\036\023\037\063\040\064\041\051\045\042\046" +
    "\024\050\040\052\032\055\052\056\057\060\041\001\001" +
    "\000\054\003\030\005\033\010\055\012\060\015\034\016" +
    "\053\017\036\022\037\031\214\035\050\036\023\037\063" +
    "\040\064\041\051\045\042\046\024\050\040\052\032\055" +
    "\052\056\057\060\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\156\020\231\021\127\022\157\023\120" +
    "\042\151\050\154\001\001\000\004\027\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\243\034\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\243\034\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\156\020\267\021\127\022\157\023\120\042" +
    "\151\050\154\001\001\000\002\001\001\000\004\027\172" +
    "\001\001\000\002\001\001\000\056\003\030\005\033\010" +
    "\055\012\060\013\272\015\034\016\053\017\036\022\037" +
    "\031\046\035\050\036\023\037\063\040\064\041\051\045" +
    "\042\046\024\050\040\052\032\055\052\056\057\060\041" +
    "\001\001\000\054\003\030\005\033\010\055\012\060\015" +
    "\034\016\053\017\036\022\037\031\214\035\050\036\023" +
    "\037\063\040\064\041\051\045\042\046\024\050\040\052" +
    "\032\055\052\056\057\060\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\030\005\033\010\055\012\060\013\300\015\034" +
    "\016\053\017\036\022\037\031\046\035\050\036\023\037" +
    "\063\040\064\041\051\045\042\046\024\050\040\052\032" +
    "\055\052\056\057\060\041\001\001\000\054\003\030\005" +
    "\033\010\055\012\060\015\034\016\053\017\036\022\037" +
    "\031\214\035\050\036\023\037\063\040\064\041\051\045" +
    "\042\046\024\050\040\052\032\055\052\056\057\060\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\305\050\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\332\007\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\156\020\315\021\127\022\157\023\120\042\151\050" +
    "\154\001\001\000\002\001\001\000\004\027\172\001\001" +
    "\000\002\001\001\000\056\003\030\005\033\010\055\012" +
    "\060\013\320\015\034\016\053\017\036\022\037\031\046" +
    "\035\050\036\023\037\063\040\064\041\051\045\042\046" +
    "\024\050\040\052\032\055\052\056\057\060\041\001\001" +
    "\000\054\003\030\005\033\010\055\012\060\015\034\016" +
    "\053\017\036\022\037\031\214\035\050\036\023\037\063" +
    "\040\064\041\051\045\042\046\024\050\040\052\032\055" +
    "\052\056\057\060\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\030\005\033\010\055\012\060\013\326\015\034\016\053" +
    "\017\036\022\037\031\046\035\050\036\023\037\063\040" +
    "\064\041\051\045\042\046\024\050\040\052\032\055\052" +
    "\056\057\060\041\001\001\000\054\003\030\005\033\010" +
    "\055\012\060\015\034\016\053\017\036\022\037\031\214" +
    "\035\050\036\023\037\063\040\064\041\051\045\042\046" +
    "\024\050\040\052\032\055\052\056\057\060\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\030\005\033" +
    "\010\055\012\060\013\335\015\034\016\053\017\036\022" +
    "\037\031\046\035\050\036\023\037\063\040\064\041\051" +
    "\045\042\046\024\050\040\052\032\055\052\056\057\060" +
    "\041\001\001\000\054\003\030\005\033\010\055\012\060" +
    "\015\034\016\053\017\036\022\037\031\214\035\050\036" +
    "\023\037\063\040\064\041\051\045\042\046\024\050\040" +
    "\052\032\055\052\056\057\060\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\361\052\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\364\052\357" +
    "\001\001\000\002\001\001\000\056\003\030\005\033\010" +
    "\055\012\060\013\366\015\034\016\053\017\036\022\037" +
    "\031\046\035\050\036\023\037\063\040\064\041\051\045" +
    "\042\046\024\050\040\052\032\055\052\056\057\060\041" +
    "\001\001\000\056\003\030\005\033\010\055\012\060\015" +
    "\034\016\053\017\036\022\037\031\214\035\050\036\023" +
    "\037\063\040\064\041\051\044\367\045\042\046\024\050" +
    "\040\052\032\055\052\056\057\060\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\030\005\033\010\055\012\060" +
    "\013\u0103\015\034\016\053\017\036\022\037\031\046\035" +
    "\050\036\023\037\063\040\064\041\051\045\042\046\024" +
    "\050\040\052\032\055\052\056\057\060\041\001\001\000" +
    "\056\003\030\005\033\010\055\012\060\015\034\016\053" +
    "\017\036\022\037\031\214\035\050\036\023\037\063\040" +
    "\064\041\051\044\u0104\045\042\046\024\050\040\052\032" +
    "\055\052\056\057\060\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


        HashMap<String, ArrayList<String>> symbols_table = new HashMap<String, ArrayList<String>>();
        String current_hash;
        public void print_symbols_table(){
                for (String key: symbols_table.keySet()) {
                        System.out.println("Tabla de simbolos: \n" + key);
                        System.out.println("Valores: ");
                        for (String item: symbols_table.get(key)) {
                                System.out.println(item);
                        }
                        System.out.println("");
                }
        }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // identFunc ::= tipoFuncion ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        System.out.println("/_Nueva tabla de simbolos_/:  " + b);
                        String tipoTabla = "main";
                        tipoTabla = "Tipo: funcion: " + a;
                        ArrayList<String> funcionMain = new ArrayList<String>();
                        current_hash = b.toString();
                        funcionMain.add(tipoTabla);
                        symbols_table.put(current_hash, funcionMain);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identFunc",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // identMain ::= tipoFuncion mainC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        System.out.println("/_Nueva tabla de simbolos_/:  " + "main");
                        String tipoTabla = "main";
                        tipoTabla = "Tipo: main: " + a;
                        ArrayList<String> funcionMain = new ArrayList<String>();
                        current_hash = "main";
                        funcionMain.add(tipoTabla);
                        symbols_table.put(current_hash, funcionMain);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identMain",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // iniFuncion ::= identFunc aperturaP param cerraduraP aperturaB bloque returnD cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"("+b+") {"+d+e+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFuncion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // iniFuncion ::= identFunc aperturaP cerraduraP aperturaB bloque returnD cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"() {"+b+c+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFuncion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones iniFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("/_Fin de tabla de simbolos1: _/"+ a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= iniFuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("/_Fin de tabla de simbolos2: _/"+ a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= identMain aperturaP cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		 System.out.println("/_Fin de tabla de simbolos3: _/ : main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= funciones main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ini ::= inicio 
            {
              Object RESULT =null;
		 print_symbols_table(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operando ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operando ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operando ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operando ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacionNumSim ::= operando operacionArit operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNumSim",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacionNum ::= operacionNum operacionArit operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNum",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacionNum ::= operacionNumSim 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionNum",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variableNum ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variableNum ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variableNum ::= operacionNum 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableNum",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacionSumaUna ::= aumento ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++" + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionSumaUna",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacionRestaUna ::= decremento ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--" + a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRestaUna",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacionRacNum ::= operando operacionRac operando 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRacNum",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operandoBool ::= expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operandoBool ::= bool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operandoBool ::= operacionRacNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operandoBool ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operandoBool ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBool",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicionSim ::= operandoBool operacionLog operandoBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionSim",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= condicion operacionLog operandoBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= condicionSim 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variableBool ::= expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variableBool ::= bool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variableBool ::= operacionRacNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variableBool ::= condicion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBool",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expNegada ::= negacion expNegada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expNegada ::= negacion aperturaP condicion cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!"+"("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expNegada ::= negacion ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expNegada ::= negacion funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNegada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifD ::= ifC aperturaP ident cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if ("+a+"){"+b+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifD ::= ifC aperturaP ident cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "if ("+a+"){"+b+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifD ::= ifC aperturaP condicion cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if ("+a+"){"+b+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifD ::= ifC aperturaP condicion cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "if ("+a+"){"+b+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elif ::= elifC aperturaP ident cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "elif ("+a+"){"+b+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elif ::= elifC aperturaP ident cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "elif ("+a+"){"+b+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elif ::= elifC aperturaP condicion cerraduraP aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "if ("+a+"){"+b+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elif ::= elifC aperturaP condicion cerraduraP aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "elif ("+a+"){"+b+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elseD ::= elseC aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "else{"+a+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseD",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elseD ::= elseC aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "else{"+a+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseD",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloqueElif ::= bloqueElif elif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElif",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloqueElif ::= elif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueElif",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloqueIf ::= ifD bloqueElif 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloqueIf ::= ifD elseD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloqueIf ::= ifD bloqueElif elseD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b+" "+c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloqueIf ::= ifD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista ::= lista coma lista 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l1+","+l2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista ::= grupoArreglo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // grupoArreglo ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // grupoArreglo ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // grupoArreglo ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // grupoArreglo ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoArreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arregloSim ::= tipoVarArr ident aperturaC INTEGER_LITERAL cerraduraC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c+" "+a+" ["+b.toString()+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSim",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arregloAsig ::= arregloSim equivalente aperturaC lista cerraduraC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+" = ["+b+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloAsig",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arregloInd ::= ident aperturaC INTEGER_LITERAL cerraduraC equivalente grupoArreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" = ["+b.toString()+"] = " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloInd",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // returnD ::= returnC ident finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a + "$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // returnD ::= returnC INTEGER_LITERAL finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a.toString()+ "$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // returnD ::= returnC FLOAT_LITERAL finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "return " + a.toString()+ "$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnD",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print ::= printC aperturaP STRING_LITERAL cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "print("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // input ::= inputC aperturaP ident cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "input("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // param ::= param coma param 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+","+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // param ::= tipoVarArr ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // param ::= BOOLEAN ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "boolean "+a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaIdent ::= listaIdent coma listaIdent 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+","+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdent",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaIdent ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdent",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funcionAsig ::= ident aperturaP listaIdent cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"("+b+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionAsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funcionAsig ::= ident aperturaP cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = a+"()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionAsig",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable ::= tipoVarArr ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        System.out.println("PARSER: identificardor: " + b);
                        symbols_table.get(current_hash).add(b.toString() + ": " + a.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable ::= BOOLEAN ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                System.out.println("PARSER: identificardor: boolean");
                symbols_table.get(current_hash).add("boolean: " + a.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion ::= variable finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion ::= variableAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion ::= operacionNum finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion ::= funcionAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion ::= operacionRacNum finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion ::= arregloSim finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion ::= arregloAsig finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracion ::= arregloInd finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracion ::= input finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracion ::= print finalExpre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"$"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // forD ::= forC aperturaP variableAsig inC ident operacionSumaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // forD ::= forC aperturaP ident inC ident operacionSumaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forD ::= forC aperturaP variableAsig inC ident operacionRestaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forD ::= forC aperturaP ident inC ident operacionRestaUna cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "for("+a+" in "+b+c+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloqueFor ::= forD aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a+"{"+b+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloqueFor ::= forD aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = a+"{"+b+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= bloqueIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= bloqueDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= bloqueFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+" "+b; System.out.println(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloque ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // doD ::= doC aperturaB bloque cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "do{"+a+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // doD ::= doC aperturaB bloque BREAK cerraduraB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "do{"+a+"break$}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // whileD ::= whileC aperturaP condicion cerraduraP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "while("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileD",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloqueDoWhile ::= doD whileD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a+""+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDoWhile",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variableAsig ::= variable equivalente agrupacionVariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("PARSER: sentencia: " + a + "\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableAsig",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // agrupacionVariable ::= funcionAsig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // agrupacionVariable ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // agrupacionVariable ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // agrupacionVariable ::= ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // agrupacionVariable ::= variableNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // agrupacionVariable ::= variableBool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupacionVariable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comentarioLineal ::= comentarioL ident 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "@"+a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarioLineal",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comentarioBloque ::= comentApert ident comentCerrad 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "/_ "+a+"_/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarioBloque",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipoVarArr ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipoVarArr ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipoVarArr ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipoVarArr ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarArr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipoNum ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoNum",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipoNum ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoNum",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipoFuncion ::= tipoNum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipoFuncion ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacionArit ::= suma 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacionArit ::= resta 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacionArit ::= division 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacionArit ::= multiplicacion 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacionArit ::= modulo 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacionArit ::= potencia 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionArit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacionRac ::= menor 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacionRac ::= mayor 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacionRac ::= menorIgual 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacionRac ::= mayorIgual 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operacionRac ::= diferente 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operacionRac ::= igual 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRac",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operacionLog ::= conjuncion 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLog",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operacionLog ::= disyuncion 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLog",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
